[{"C:\\black_jack\\black_jack\\src\\index.js":"1","C:\\black_jack\\black_jack\\src\\App.js":"2","C:\\black_jack\\black_jack\\src\\reportWebVitals.js":"3","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js":"4","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js":"5","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js":"6","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js":"7","C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js":"8","C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js":"9","C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js":"10","C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js":"11","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js":"12","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"13","C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js":"14","C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js":"15","C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js":"16","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js":"17","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"18","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js":"19","C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js":"20","C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js":"21","C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js":"22","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js":"23","C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js":"24","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js":"25","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"26","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js":"27","C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js":"28","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js":"29","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\decisionPhase\\decision.js":"30","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\decisionPhase\\Decision.js":"31","C:\\black_jack\\black_jack\\src\\components\\UI\\AlertBox\\AlertBox.js":"32"},{"size":1462,"mtime":1613750019551,"results":"33","hashOfConfig":"34"},{"size":450,"mtime":1621086868951,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"34"},{"size":1069,"mtime":1626971691345,"results":"37","hashOfConfig":"34"},{"size":8076,"mtime":1632251441257,"results":"38","hashOfConfig":"34"},{"size":12931,"mtime":1632247537579,"results":"39","hashOfConfig":"34"},{"size":382,"mtime":1612258874192,"results":"40","hashOfConfig":"34"},{"size":1868,"mtime":1635896654502,"results":"41","hashOfConfig":"34"},{"size":10488,"mtime":1632692151345,"results":"42","hashOfConfig":"34"},{"size":1147,"mtime":1632247343924,"results":"43","hashOfConfig":"34"},{"size":5534,"mtime":1632251169481,"results":"44","hashOfConfig":"34"},{"size":2310,"mtime":1631199882848,"results":"45","hashOfConfig":"34"},{"size":518,"mtime":1609709606059,"results":"46","hashOfConfig":"34"},{"size":1274,"mtime":1615228316065,"results":"47","hashOfConfig":"34"},{"size":3569,"mtime":1632246920617,"results":"48","hashOfConfig":"34"},{"size":6770,"mtime":1632692832428,"results":"49","hashOfConfig":"34"},{"size":4198,"mtime":1632692745682,"results":"50","hashOfConfig":"34"},{"size":447,"mtime":1609853889181,"results":"51","hashOfConfig":"34"},{"size":6416,"mtime":1632689648542,"results":"52","hashOfConfig":"34"},{"size":531,"mtime":1626971691356,"results":"53","hashOfConfig":"34"},{"size":504,"mtime":1609794501214,"results":"54","hashOfConfig":"34"},{"size":3440,"mtime":1632688800426,"results":"55","hashOfConfig":"34"},{"size":8681,"mtime":1632245620900,"results":"56","hashOfConfig":"34"},{"size":695,"mtime":1632685678541,"results":"57","hashOfConfig":"34"},{"size":1379,"mtime":1621547092216,"results":"58","hashOfConfig":"34"},{"size":574,"mtime":1609853867643,"results":"59","hashOfConfig":"34"},{"size":799,"mtime":1627228038666,"results":"60","hashOfConfig":"34"},{"size":649,"mtime":1615229069655,"results":"61","hashOfConfig":"34"},{"size":2267,"mtime":1627051103189,"results":"62","hashOfConfig":"34"},{"size":916,"mtime":1631036797201,"results":"63","hashOfConfig":"34"},{"size":1023,"mtime":1631037934532,"results":"64","hashOfConfig":"34"},{"size":2023,"mtime":1632160658227,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},"p3rekg",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"69"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"69"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"69"},{"filePath":"134","messages":"135","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"69"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"C:\\black_jack\\black_jack\\src\\index.js",["141","142"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore , combineReducers , applyMiddleware} from 'redux';\r\nimport { composeWithDevTools , devToolsEnhancer  } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\nimport { Provider } from 'react-redux'; \r\nimport gameReduecer from './Store/Reduecers/gameReducer'\r\nimport roundReduecer from './Store/Reduecers/roundReducer'\r\nimport cardReduecer from './Store/Reduecers/cardReducer'\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  name:'arik',\r\n  trace:true\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n});\r\n\r\nconst rootReduecer = combineReducers({\r\n  game:gameReduecer,\r\n  round:roundReduecer,\r\n  cards:cardReduecer\r\n});\r\n\r\nconst store = createStore(rootReduecer,composeEnhancers(\r\n  applyMiddleware(thunk),\r\n));\r\n// <React.StrictMode>\r\n// /* </React.StrictMode> */\r\n// \r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["143","144"],"C:\\black_jack\\black_jack\\src\\App.js",[],"C:\\black_jack\\black_jack\\src\\reportWebVitals.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js",["145","146","147","148","149","150","151","152"],"import { actionPromise } from '../Actions'\r\nimport * as actionTypes from '../Actions/actionTypes'\r\n\r\nconst initState = {\r\n    round:false,\r\n    // split:0,\r\n    roundStatus:'',\r\n    handsResult:[''],\r\n    stand:[false],\r\n    dealerBust:false,\r\n    bid:[0],\r\n    originalBid:0,\r\n    insurance:false,\r\n    next:false,\r\n    \r\n}\r\n\r\nconst orderStandArray = (standArray ,indexToSwitch = 0) => {\r\n\r\n    // find index of \"false\" in standArray\r\n    let subtitutedIndex = standArray.findIndex((standValue,index) => { \r\n        if(index!== 0)    \r\n            return standValue==false\r\n        \r\n    })\r\n\r\n    if(subtitutedIndex === -1)\r\n        subtitutedIndex = 0;\r\n\r\n    return standArray.map((standStatus,index)=>{\r\n        // if(index === action.activeDeckIndex)\r\n        // if(index === action.activeDeckIndex)\r\n        //     return stand\r\n        // else return standStatus\r\n        switch (index) {\r\n            case indexToSwitch:\r\n                \r\n                // return standArray[standArray.length-1];\r\n                if(subtitutedIndex==0)\r\n                    return true\r\n                else\r\n                    return standArray[subtitutedIndex];\r\n            case subtitutedIndex:\r\n                return true;\r\n                \r\n            default:\r\n                return standStatus;\r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\nconst orderHandResultArray = (resultsArray,activeDeckIndex) => {\r\n    let subtitutedIndex = resultsArray.findIndex((resultValue,index) => { \r\n        if(index!== 0)    \r\n            return resultValue==\"\"\r\n        \r\n    });\r\n\r\n    if(subtitutedIndex === -1)\r\n    subtitutedIndex = 0;\r\n\r\n\r\n    let updatedHandsResult = resultsArray.map((result,index)=> {\r\n        // if(result === '' && index !== state.split) \r\n        //     isPlayingHandExist = true;\r\n        // if(index === state.split)\r\n        if(index === activeDeckIndex)\r\n            return resultsArray[resultsArray.length-1]\r\n        // else if(index === resultsArray.length-1)\r\n        else if(index === subtitutedIndex)\r\n            return 'decision';\r\n        else return result;\r\n    });\r\n\r\n    return updatedHandsResult;\r\n}\r\n\r\n\r\nconst reduecer = (state = initState, action) => {\r\n    let newStandArray;\r\n    switch (action.type) {\r\n        case actionTypes.START_ROUND:\r\n            return {\r\n                ...state,\r\n                round:true,\r\n                roundStatus:'pending',\r\n                bid:[+action.bid],\r\n                originalBid:+action.bid\r\n            }\r\n        case actionTypes.INSURANCE:\r\n            return {\r\n                ...state,\r\n                insurance:true\r\n            }\r\n        // case actionTypes.COLLECT_INSURANCE:\r\n        //     return {\r\n        //         ...state,\r\n        //         insurance:false\r\n        //     }\r\n        case actionTypes.ROUND_STATUS:\r\n            return {...state,\r\n                roundStatus:action.status\r\n            }\r\n        case actionTypes.INIT_ROUND_BID:\r\n            let newBidsArray = state.bid.map((bidAmount,bidIndex)=> {\r\n                if(bidIndex === action.deckIndex)\r\n                    return state.bid[state.bid.length-1]\r\n                else if(bidIndex === action.deckIndex -1)\r\n                    return 0\r\n                else\r\n                    return bidAmount\r\n            });\r\n            return {...state,bid:newBidsArray}\r\n\r\n        case actionTypes.DOUBLE_BID:\r\n\r\n            let newBidArray = state.bid.map((bidAmount,index)=>{\r\n                if(index === action.numOfSplits)\r\n                    return bidAmount*2\r\n                else return bidAmount\r\n            });\r\n\r\n            \r\n            return {...state,\r\n                bid:newBidArray}\r\n        case actionTypes.INIT_ROUND:\r\n            console.log('init game');\r\n            let what = {...initState};\r\n            return {\r\n                ...initState,\r\n            }\r\n        \r\n        case actionTypes.STAND:\r\n            // debugger;\r\n            if(state.stand.length === 1)\r\n            {\r\n                return {\r\n                    ...state,\r\n                    stand:[true],\r\n                    // split:newSplit,\r\n                    handsResult:['decision'],    \r\n                }\r\n            }\r\n            let foundNotFinishedDeck = state.handsResult.find(element => element === '');\r\n            if(foundNotFinishedDeck === '')\r\n            {\r\n                newStandArray = orderStandArray(state.stand);\r\n                let newSplit = state.split;\r\n                if(newSplit)\r\n                newSplit = state.split - 1;\r\n                \r\n                // isPlayingHandExist = false;\r\n\r\n                let updatedHandsResult = orderHandResultArray(state.handsResult,action.activeDeckIndex)\r\n                // let updatedHandsResult = state.handsResult.map((result,index)=> {\r\n                //     // if(result === '' && index !== state.split) \r\n                //     //     isPlayingHandExist = true;\r\n                //     // if(index === state.split)\r\n                //     if(index === action.activeDeckIndex)\r\n                //         return state.handsResult[state.handsResult.length-1]\r\n                //     else if(index === state.handsResult.length-1)\r\n                //         return 'decision';\r\n                //     else return result;\r\n                // })\r\n\r\n                // debugger;\r\n                \r\n                return {...state,\r\n                    stand:newStandArray,\r\n                    split:newSplit,\r\n                    handsResult:updatedHandsResult,    \r\n                }\r\n            \r\n            }\r\n        case actionTypes.CHANGE_NEXT_STATUS:\r\n            return {\r\n                ...state,\r\n                next:action.nextValue\r\n            }\r\n       \r\n        case actionTypes.CHANGE_HAND_RESULT:\r\n            // console.log('init game');\r\n            // decrease the split value if it's more than 0\r\n            let newSplitValue = state.split;\r\n            if(newSplitValue)\r\n            newSplitValue = state.split - 1;\r\n\r\n            // check if it's the last deck\r\n            let isLastDeck ;\r\n            let countUnfinishedDecks=0;\r\n            for (let index = 0; index < state.handsResult.length; index++) {\r\n                if(state.handsResult[index] === '')\r\n                    countUnfinishedDecks++;\r\n            }\r\n\r\n            isLastDeck = countUnfinishedDecks > 1 ? false : true ;\r\n\r\n            // isPlayingHandExist = false;\r\n            let newHandsResult = state.handsResult.map((result,index)=> {\r\n                // if(result === '' && index !== state.split)\r\n                //     isPlayingHandExist = true;\r\n                    if(result === '' && isLastDeck)\r\n                        return action.result;\r\n                    else if(index === 0 && !isLastDeck)\r\n                        return state.handsResult[state.handsResult.length-1]\r\n                    else if(index === state.handsResult.length-1)\r\n                        return action.result;\r\n                    else return result;\r\n            })\r\n            return {\r\n                ...state,\r\n                handsResult: newHandsResult,\r\n                split:newSplitValue\r\n            }\r\n            // if(isPlayingHandExist)\r\n            // else\r\n            //     return {\r\n            //         ...state,\r\n            //         handsResult: newHandsResult,\r\n            //         // roundStatus:'desicion',\r\n            //         split:newSplitValue\r\n            //     }\r\n        case actionTypes.SPLIT_DECK:\r\n            // newStandArray = orderStandArray(state.stand.concat(false))\r\n\r\n            return {\r\n                ...state,\r\n                split:action.numOfSplits,\r\n                bid:state.bid.concat(+state.originalBid),\r\n                stand:state.stand.concat(false),\r\n                handsResult: [...state.handsResult,'']\r\n\r\n            }\r\n        case actionTypes.DEALER_BUST:\r\n            return {\r\n                ...state,\r\n                dealerBust:true\r\n            }\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default reduecer;","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js",["153","154","155","156","157"],"import * as actionTypes from '../Actions/actionTypes'\r\n\r\nconst initState = {\r\n    dealerCards:[],\r\n    dealerCardsSum:0,\r\n    playerCards:[],\r\n    playerCardsSum:[],\r\n    activeDeckNumber:0,\r\n    preActiveDeckNumber:0,\r\n    lastDeckResult:'',\r\n    insuranceResult:'',\r\n    bamba:'bamba'\r\n}\r\n\r\n// demonstration\r\nconst playerDecks = {\r\n    playerCards: [\r\n        [{\r\n            value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        },\r\n        {   value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        } // + deckFinished : true/false\r\n             // + activeDeck: true/false\r\n        ]\r\n        ,\r\n        [],\r\n        []\r\n    ]\r\n}\r\n\r\n\r\nconst checkForDifferentSum = cards => {\r\n    let countAces = 0;\r\n    let sum = 0;\r\n    \r\n    for(let card of cards)\r\n    {\r\n        if(card.value > 10 && !card.Ace)\r\n        sum = sum + 10;\r\n        else if(card.Ace)    \r\n        {\r\n            countAces++;\r\n            sum+=11;\r\n        }\r\n        else sum+=card.value;\r\n    }   \r\n    let closestToPassed = sum;\r\n    if(countAces)\r\n    {   \r\n        for (let index = 1; index < countAces + 1; index++) {\r\n            if(sum - index*10 < 22)\r\n                return (sum - index*10)\r\n            closestToPassed = (sum - index*10)    \r\n        }   \r\n    }\r\n    return closestToPassed;\r\n}\r\n\r\n// const checkNumOfAces = (cards) => {\r\n//         let count = 0;\r\n//         for(let card of cards)\r\n//         {\r\n//             if(card.Ace)\r\n//             {\r\n//                 count++;\r\n//                 //do something\r\n//             }\r\n//         }\r\n        \r\n// }\r\n\r\nconst findActiveDeck = (playerCards) => {\r\n    \r\n    for (const deck in playerCards) {\r\n        if(playerCards[+deck].activeDeck)\r\n            return +deck\r\n    }\r\n    // in a case there is no active deck a new available one will be picked!\r\n    \r\n    for (let index = playerCards.length-1; index > -1; index--) {\r\n        if(!playerCards[+index].deckFinished)\r\n            return index;\r\n        \r\n    }\r\n\r\n    //in a case where all the decks are finished and no active deck was found just return -1\r\n    return -1;\r\n}\r\n\r\n\r\nconst orderCardsDecks = (cardsDeck,playerDecksSum,deckNumberToSwitch) => {\r\n    let OrderedCards = cardsDeck.map((deck,index)=> {\r\n        switch (index) {\r\n            case 0:\r\n                return cardsDeck[deckNumberToSwitch]    \r\n            case deckNumberToSwitch:\r\n                return cardsDeck[0]\r\n            default:\r\n                return deck;\r\n        }       \r\n    });\r\n\r\n    let OrderedSum = playerDecksSum.map((sum,index)=> {\r\n        switch (index) {\r\n            case 0:\r\n                return playerDecksSum[deckNumberToSwitch]    \r\n                break;\r\n            case deckNumberToSwitch:\r\n                return playerDecksSum[0]\r\n            default:\r\n                return sum;\r\n                break;\r\n        }       \r\n    });\r\n\r\n    return { OrderedCards , OrderedSum };\r\n}\r\n\r\n\r\nconst reduecer = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionTypes.DEVIDE_STARTING_CARDS:\r\n            let playerSum = action.playerCardsSum;\r\n            action.playerCards.deckFinished = false;\r\n            action.playerCards.activeDeck = true;\r\n            if(action.playerCardsSum>21)\r\n                playerSum = checkForDifferentSum(action.playerCards);\r\n            let dealerSum = action.dealerCardsSum;\r\n            if(action.dealerCardsSum>21)\r\n                dealerSum = checkForDifferentSum(action.dealerCards);\r\n            return {...state,\r\n                dealerCards:action.dealerCards,\r\n                playerCards:[...state.playerCards ,action.playerCards],\r\n                playerCardsSum:[...state.playerCardsSum,playerSum],\r\n                dealerCardsSum:dealerSum,\r\n                activeDeckNumber:0,\r\n                preActiveDeckNumber:0,\r\n                lastDeckResult:''\r\n            }\r\n\r\n        case actionTypes.REMOVE_DECK:\r\n            let newPlayerCardsDeckArray = state.playerCards.filter((deck,deckIndex)=> {\r\n                if(+action.deckNumber !== +deckIndex)\r\n                    return deck;\r\n                    \r\n            });\r\n            let newPlayerSumCardsDecks = state.playerCardsSum.filter((sum,sumIndex)=> {\r\n                if(+action.deckNumber !== +sumIndex)\r\n                    return sum;\r\n                    \r\n            });\r\n            let newActiveDeck = newPlayerCardsDeckArray.length -1;\r\n            return {\r\n                ...state,\r\n                activeDeckNumber:newActiveDeck,\r\n                playerCards:newPlayerCardsDeckArray,\r\n                playerCardsSum:newPlayerSumCardsDecks\r\n\r\n            }\r\n        case actionTypes.MARK_DECK_AS_FINISHED:\r\n            \r\n            let newPlayerCardsArray = state.playerCards.map((deck,index)=> {\r\n                if(index === action.deckNumber)\r\n                {\r\n                    deck.deckFinished = true;\r\n                    deck.activeDeck = false;\r\n                }\r\n                return deck;\r\n            })\r\n            let preActiveDeckNumber = state.activeDeckNumber;\r\n            let activeDeckNum = findActiveDeck(newPlayerCardsArray);\r\n            //in a case where all the decks are finished just pick the last deck that was active\r\n            // and re-order the cards decks\r\n            let orderedCards = {    OrderedCards:state.playerCards , OrderedSum:state.playerCardsSum  };\r\n            if(activeDeckNum === -1)\r\n            {\r\n                // activeDeckNum = state.playerCards.length - 1;\r\n                activeDeckNum = state.preActiveDeckNumber;\r\n            }\r\n            else\r\n                orderedCards= orderCardsDecks(state.playerCards,state.playerCardsSum,activeDeckNum);\r\n                // ddd\r\n\r\n            return {\r\n                ...state,\r\n                activeDeckNumber:activeDeckNum,\r\n                preActiveDeckNumber:preActiveDeckNumber,\r\n                playerCards:orderedCards.OrderedCards,\r\n                playerCardsSum:orderedCards.OrderedSum\r\n            }\r\n        case actionTypes.ADD_CARD:\r\n            let activeDeckIndex = findActiveDeck(state.playerCards);\r\n            // debugger;\r\n            activeDeckIndex = 0;\r\n            if(activeDeckIndex === -1)\r\n                activeDeckIndex = state.playerCards.length - 1;\r\n            let sum ;\r\n            if(action.card.value > 10 && !action.card.Ace)\r\n                sum = 10 + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            else\r\n                sum = action.card.value + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            if(sum > 21)\r\n                sum = checkForDifferentSum([...(action.holder === 'player' ? state.playerCards[activeDeckIndex] : state.dealerCards) , action.card]);\r\n       \r\n\r\n            if(action.holder === 'player')\r\n            {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    if(index === activeDeckIndex)\r\n                        return sum;\r\n                    else return value;\r\n                })\r\n\r\n                let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                    if(deckIndex === activeDeckIndex)\r\n                    {\r\n                        return state.playerCards[deckIndex].concat(action.card);\r\n                    }\r\n                    else return state.playerCards[deckIndex]\r\n                });\r\n                let newPlayerDecks = newPlayerCards;\r\n                let doubleOrderedCard;\r\n                // let activeDeckIndex = findActiveDeck(state.playerCards);\r\n                if(action.double)\r\n                {\r\n                    newPlayerDecks[0].activeDeck = false;\r\n                    newPlayerDecks[0].deckFinished = true;\r\n                    let activeDeckIndexDoubleEffect = findActiveDeck(newPlayerDecks);\r\n                    if(activeDeckIndexDoubleEffect === -1)\r\n                    {\r\n                        // nope\r\n                    }\r\n                    else {\r\n                        doubleOrderedCard = orderCardsDecks(newPlayerDecks,playerCardsSumArray,activeDeckIndexDoubleEffect)\r\n                        return {\r\n                            ...state,\r\n                            playerCards:doubleOrderedCard.OrderedCards,\r\n                            playerCardsSum:doubleOrderedCard.OrderedSum\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                newPlayerCards[activeDeckIndex].activeDeck = true;\r\n                newPlayerCards[activeDeckIndex].deckFinished = false;\r\n\r\n                // debugger;\r\n                return {...state,\r\n                playerCards:newPlayerCards,\r\n                playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n            else return {\r\n                ...state,\r\n                    dealerCards:[...state.dealerCards,action.card],\r\n                    dealerCardsSum:sum,\r\n                    activeDeckNumber:activeDeckIndex\r\n            };\r\n        case actionTypes.CHANGE_CARDS_SUM:\r\n\r\n            if(action.deckOwner === 'Dealer') \r\n            {\r\n                return {\r\n                    ...state,\r\n                    dealerCardsSum:action.newSum\r\n                }\r\n            }\r\n            else {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    if(index === action.NumOfsplits)\r\n                        return action.newSum;\r\n                    else return value;\r\n                })\r\n                return {\r\n                    ...state,\r\n                    playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n        case 'renderCardsTOFinishROund':\r\n        case 'bamba':\r\n            return {\r\n                ...state,bamba:'yep'\r\n            }\r\n            // maybe we will render this\r\n\r\n        case actionTypes.INIT_ROUND:\r\n            console.log('init game');\r\n            let { dealerCards,\r\n            dealerCardsSum,\r\n            playerCards,\r\n            playerCardsSum,\r\n            activeDeckNumber\r\n            } = initState;\r\n            return {\r\n                dealerCards,\r\n                dealerCardsSum,\r\n                playerCards,\r\n                playerCardsSum,\r\n                activeDeckNumber,\r\n                preActiveDeckNumber:0,\r\n                lastDeckResult:state.lastDeckResult\r\n            }\r\n        case actionTypes.UPDATE_DECK_RESULT:\r\n        return {\r\n            ...state,\r\n            lastDeckResult:action.lastDeckResult,\r\n\r\n        }\r\n        case actionTypes.CHECK_INSURANCE:\r\n\r\n        let result = state.dealerCards[0].value === 10;\r\n        return {\r\n            ...state,\r\n            insuranceResult:result\r\n\r\n        }\r\n        case actionTypes.SPLIT_DECK:\r\n           \r\n            \r\n            // find active Deck\r\n            let activeDeck = findActiveDeck(state.playerCards);\r\n            if(activeDeck === -1)\r\n                activeDeck = state.playerCards.length - 1;\r\n            \r\n            // set new card decks for the player after the split\r\n\r\n            // let firstSplitedCard = state.playerCards[activeDeck][0] \r\n            let secondSplitedCard = [];\r\n            secondSplitedCard.deckFinished = false;\r\n            secondSplitedCard.activeDeck = true;\r\n            secondSplitedCard.push( state.playerCards[activeDeck][1]);\r\n            \r\n            // map new player cards and take out spiltted card\r\n            let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                if(deckIndex === activeDeck){\r\n                    // firstSplitedCard.\r\n                    deck.activeDeck = false;\r\n                    deck.pop();\r\n                    return deck;\r\n                \r\n                }\r\n                else return deck;\r\n            } ) ;\r\n            // add the splitted card as a new deck of cards\r\n            newPlayerCards = newPlayerCards.concat([secondSplitedCard]);\r\n            // set new card decks summary array   \r\n            let newPlayerSumCards = state.playerCardsSum.concat(state.playerCardsSum[activeDeck]/2);\r\n            newPlayerSumCards = newPlayerSumCards.map((el,index) => {\r\n                if(index === activeDeck)\r\n                    return el/2\r\n                else return el;\r\n            })\r\n\r\n            let orderedPlayerCards = orderCardsDecks(newPlayerCards,newPlayerSumCards,newPlayerCards.length-1);\r\n            return {\r\n                ...state,\r\n                playerCards:orderedPlayerCards.OrderedCards,\r\n                playerCardsSum:orderedPlayerCards.OrderedSum,\r\n                activeDeckNumber:newPlayerCards.length - 1,\r\n                preActiveDeckNumber:state.activeDeckNumber\r\n                \r\n            }\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default reduecer;","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js",["158","159","160","161","162","163","164","165","166"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport classes from './Game.module.css'\r\nimport TableBoard from '../../components/TableBoard/TableBoard'\r\nimport {connect} from 'react-redux'\r\nimport * as actions from '../../Store/Actions/index'\r\nimport AlertBox from '../../components/UI/AlertBox/AlertBox'\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n    const gameRefInitMount = useRef(false);\r\n    const [isInsuranceCollected, setIsInsuranceCollected] = useState(false)\r\n    useEffect(() => {\r\n        if( props.roundStatus === 'decision' && props.next) \r\n        {\r\n            // if(props.insurance && !isInsuranceCollected)\r\n            // {\r\n            //     if (props.dealerCards[1].Ace && props.dealerCards[0].value > 9 && !props.dealerCards[0].Ace)\r\n            //     {\r\n            //         let x;\r\n            //         props.collectInsurance(Math.round(props.roundBids[0]/2));\r\n                \r\n            //     }\r\n            //     else {\r\n            //         let aaa;\r\n            //         props.collectInsurance(-1*Math.round(props.roundBids[0]/2));\r\n            //     }\r\n            //     setIsInsuranceCollected({isInsuranceCollected:true})\r\n            // }\r\n                // console.log('wtf');\r\n             \r\n             \r\n\r\n                console.log('we made it to the desicions phase!')\r\n                let playerResults = [];\r\n                let totalProfit = 0;\r\n                \r\n                    if (props.playerSum[+0] < 22 && props.next)\r\n                    {\r\n                        switch (true) {\r\n                            case props.playerSum[+0] - props.dealerSum > 0:\r\n                                playerResults.push('win');\r\n                                props.updateDeckResult(`won ${props.roundBids[0]}$`);\r\n                                totalProfit+= props.roundBids[0];\r\n                                props.collectProfitAndInitBid(props.roundBids[+0],+0)\r\n                            break;\r\n                            case props.playerSum[+0] - props.dealerSum < 0:\r\n                                playerResults.push('lost');\r\n                                props.updateDeckResult(`lost ${props.roundBids[0]}$` );\r\n                                totalProfit-= props.roundBids[0];\r\n                                props.collectProfitAndInitBid(-props.roundBids[+0],+0)\r\n                                break;\r\n                            case props.playerSum[+0] - props.dealerSum === 0:\r\n                                totalProfit+= props.roundBids[0];\r\n                                props.updateDeckResult('Tie');\r\n                                playerResults.push('tie');\r\n                                props.collectProfitAndInitBid(0,+0)   \r\n                            break;\r\n\r\n                            default:\r\n                                alert('something went wrong in [game.js] desicion');\r\n                                break;\r\n                        }   \r\n                    }\r\n                    else if(props.next)\r\n                    {\r\n                        playerResults.push('lost');\r\n                        props.updateDeckResult(`BUST \\n lost ${props.roundBids[0]}$`);\r\n                        totalProfit-= props.roundBids[0];\r\n                        props.collectProfitAndInitBid(-props.roundBids[+0],+0)\r\n                    }\r\n                    if(props.next)\r\n                        props.changeNextValue(false);\r\n                    props.removeDeck(0);\r\n                \r\n                // for (const index in props.playerSum) {\r\n\r\n                //     if (props.playerSum[+index] < 22 && props.next)\r\n                //     {\r\n                //         switch (true) {\r\n                //             case props.playerSum[+index] - props.dealerSum > 0:\r\n                //                 playerResults.push('win');\r\n                //                 totalProfit+= props.roundBids[index];\r\n                //                 props.collectProfitAndInitBid(props.roundBids[+index],+index)\r\n                //             break;\r\n                //             case props.playerSum[+index] - props.dealerSum < 0:\r\n                //                 playerResults.push('lost');\r\n                //                 totalProfit-= props.roundBids[index];\r\n                //                 props.collectProfitAndInitBid(-props.roundBids[+index],+index)\r\n                //             break;\r\n                //             case props.playerSum[+index] - props.dealerSum === 0:\r\n                //                 totalProfit+= props.roundBids[index];\r\n                //                 playerResults.push('tie');\r\n                //                 props.collectProfitAndInitBid(0,+index)   \r\n                //             break;\r\n\r\n                //             default:\r\n                //                 alert('something went wrong in [game.js] desicion');\r\n                //                 break;\r\n                //         }   \r\n                //     }\r\n                //     else if(props.next)\r\n                //     {\r\n                //         playerResults.push('lost');\r\n                //         totalProfit-= props.roundBids[index];\r\n                //         props.collectProfitAndInitBid(-props.roundBids[+index],+index)\r\n                //     }\r\n                //     if(props.next)\r\n                //         props.changeNextValue(false);\r\n                //     props.removeDeck(index);\r\n                // }\r\n            if(props.playerSum.length===1)\r\n                props.initRound();\r\n        }\r\n    }, [props.roundStatus,props.next]); \r\n    \r\n    useEffect(() => {\r\n        if( props.dealerBust  && props.next) \r\n        {\r\n            console.log('we made it to the dealerBust phase!')\r\n            let totalProfit = 0;\r\n            // for (const 0 in props.playerSum) {\r\n                if (props.playerSum[+0] < 22 && props.next)\r\n                {\r\n                    totalProfit+= props.roundBids[0];   \r\n                    props.updateDeckResult(`dealer BUST \\n won ${props.roundBids[0]}$`);\r\n                    props.collectProfitAndInitBid(props.roundBids[+0],+0) \r\n                }\r\n                else {\r\n                    console.log('hand ' + (+0) + 'lost');\r\n                    props.updateDeckResult(`BUST \\n lost ${props.roundBids[0]}$`);\r\n                    totalProfit-= props.roundBids[0];   \r\n                    props.collectProfitAndInitBid(-props.roundBids[+0],+0);\r\n                }\r\n\r\n                props.changeNextValue(false);\r\n                props.removeDeck(0);\r\n            // }\r\n            if(props.playerSum.length===1)\r\n                props.initRound();\r\n            \r\n        }\r\n    }, [props.dealerBust,props.next]); \r\n    \r\n    useEffect(() => {\r\n        \r\n        if(gameRefInitMount.current) {\r\n            console.log('rendering Game from use effect');\r\n            console.log(props);\r\n            if(!props.dealerSum && props.roundStatus === 'pending')\r\n            {\r\n                props.devideStartingCards();\r\n            }\r\n        }\r\n        \r\n        \r\n        else {\r\n            gameRefInitMount.current = true\r\n        }\r\n    }, [props.roundStarted])\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        if(props.roundStarted && props.insuranceResult !== '') {\r\n         \r\n            if(props.insuranceResult)\r\n            {\r\n                props.updateDeckResult('insurance on spot!');\r\n                props.collectProfitAndInitBid(0,+0);\r\n                props.initRound();\r\n            }\r\n            else {\r\n                props.updateDeckResult(`insurance wrong: lost ${Math.round(props.roundBids[0]/2)}$`);\r\n                props.collectInsurance(-Math.round(props.roundBids[0]/2));\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n    }, [props.insurance])\r\n    \r\n\r\n \r\n    console.count();\r\n\r\n\r\n    let finalResualt = '';\r\n    finalResualt = props.lastDeckResult;\r\n    // finalResualt = `dealer BUST \r\n    // lost ${props.roundBids[0]}$`;\r\n    if(props.roundStatus === 'lost' || props.roundStatus === 'win' || props.roundStatus === 'tie')\r\n    {\r\n        finalResualt = props.roundStatus;\r\n    }\r\n\r\n    console.log(props.allStand)\r\n    return ( \r\n      \r\n        \r\n            <div className={classes.Game}>\r\n                <h1>Welcome to Blackjack</h1>\r\n                <div className={classes.roundResualt}>\r\n                    <p> {finalResualt} \r\n                    {/* 22323 {'\\n sup?'} 222222222222 */}\r\n                    </p>\r\n                </div>\r\n                {/* <AlertBox>\r\n                </AlertBox> */}\r\n                <TableBoard>\r\n\r\n                </TableBoard>\r\n                \r\n            </div>\r\n        \r\n    )\r\n\r\n}\r\nconst MapStateToProps = state => {\r\n    return {\r\n        //   playerCards:state.cards.playerCards,\r\n        //   stand:state.round.stand,\r\n        //   budget:state.game.budget,\r\n        //   allStand:state.round.stand.find(el=> el === false),\r\n      dealerCards:state.cards.dealerCards,\r\n      roundStatus:state.round.roundStatus,\r\n      roundBids:state.round.bid,\r\n      dealerSum:state.cards.dealerCardsSum,\r\n      playerSum:state.cards.playerCardsSum,\r\n      roundStarted:state.round.round,\r\n      dealerBust:state.round.dealerBust,\r\n      insurance:state.round.insurance,\r\n      next:state.round.next,\r\n      lastDeckResult:state.cards.lastDeckResult,\r\n      insuranceResult:state.cards.insuranceResult\r\n\r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        // startGame : () => dispatch(actions.startGame()),\r\n        // changeRoundStatus : (status) => dispatch(actions.roundStatus(status)),\r\n        // hitOneMoreCard : (newBudget) => dispatch(actions.initRound(newBudget)),\r\n        initRound : (totalProfit) => dispatch(actions.initRound(totalProfit)),\r\n        devideStartingCards : () => dispatch(actions.devideCardForRoundStart()),\r\n        collectInsurance : (insuranceAmount) => dispatch(actions.collectInsurance(insuranceAmount)),\r\n        // collectProfit : (profit) => dispatch(actions.collectProfits(profit)),\r\n        collectProfitAndInitBid : (profit,bidIndex) => dispatch(actions.collectProfitAndInitBid(profit,bidIndex)),\r\n        removeDeck : (deckNumber) => dispatch(actions.removeDeck(deckNumber)),\r\n        changeNextValue : (nextState) => dispatch(actions.changeNextValue(nextState)),\r\n        updateDeckResult : (result) => dispatch(actions.updateDeckResult(result))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(Game)","C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js",["167","168","169","170","171","172"],"import * as actionTypes from \"./actionTypes\";\r\nimport {doubleBid , stand, initDeckBid , roundInsurance} from \"./roundAction\";\r\nimport {addCard,markDeckAsFinished,updateDeckResult,checkInsurance} from \"./cardAction\";\r\nimport { collectProfits } from './gameAction'\r\nimport { time } from \"uniqid\";\r\n\r\n\r\nexport {\r\n    startGame,\r\n    collectInsurance,\r\n    // changeBudget,\r\n    collectProfits\r\n} from './gameAction';\r\n\r\nexport {\r\n    startRound,\r\n    // makeBid,\r\n    initDeckBid,\r\n    dealerBust,\r\n    changeHandResult,\r\n    roundStatus,\r\n    stand,\r\n    doubleBid,\r\n    roundInsurance,\r\n    changeNextValue\r\n} from './roundAction';\r\n\r\nexport {\r\n    devideCardForRoundStart,\r\n    addCard,\r\n    changeDeckSum,\r\n    markDeckAsFinished,\r\n    actionPromise,\r\n    removeDeck,\r\n    updateDeckResult,\r\n    checkInsurance\r\n} from './cardAction';\r\n\r\nexport const initRound = (totalProfit) => {\r\n    return dispatch => {\r\n        return setTimeout(() => {\r\n            dispatch(\r\n                {\r\n                    type:actionTypes.INIT_ROUND,\r\n                    totalProfit\r\n                })\r\n                // setTimeout(() => {\r\n                //     // the last hand result will be shown for 2 seconds\r\n                //     dispatch(updateDeckResult(''));\r\n                // }, 1000);\r\n            \r\n        }, 401)\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const splitAnotherDeck = (numOfSplits) => {\r\n    return dispatch => {\r\n        return setTimeout(() => {\r\n            dispatch( {\r\n                type:actionTypes.SPLIT_DECK,\r\n                numOfSplits\r\n            })\r\n        }, 2);\r\n        // return dispatch( {\r\n        //     type:actionTypes.SPLIT_DECK,\r\n        //     numOfSplits\r\n        // })\r\n    }\r\n \r\n}\r\n\r\n\r\nexport const doubleOperation = (activeDeck,playerCards) => {\r\n    const playerDeck = playerCards;\r\n    return dispatch => {\r\n        // this.props.doubleBid(this.props.activeDeckNumber);\r\n        // this.props.giveOneMoreCard(this.props.activeDeckNumber);\r\n        // this.props.toStand(this.props.activeDeckNumber);\r\n        // this.props.markDeckAsFinished(this.props.activeDeckNumber);\r\n        dispatch( doubleBid(activeDeck,playerCards) )\r\n        .then(value =>{\r\n            console.log(value);\r\n            var currentdate = new Date(); \r\n            var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\"\r\n                + (currentdate.getMonth()+1)  + \"/\" \r\n                + currentdate.getFullYear() + \" @ \"  \r\n                + currentdate.getHours() + \":\"  \r\n                + currentdate.getMinutes() + \":\" \r\n                + currentdate.getSeconds();\r\n                console.log(datetime);\r\n                dispatch(addCard('player',activeDeck,'double',playerCards)).then(newCard=>{\r\n                    setTimeout(() => {\r\n                    var currentdate = new Date(); \r\n                    var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\"\r\n                        + (currentdate.getMonth()+1)  + \"/\" \r\n                        + currentdate.getFullYear() + \" @ \"  \r\n                        + currentdate.getHours() + \":\"  \r\n                        + currentdate.getMinutes() + \":\" \r\n                        + currentdate.getSeconds();\r\n                        console.log(datetime);\r\n                    \r\n                    console.log('let\\'s check the value 2 value:::::::::::::');\r\n                    // debugger;\r\n                    console.log(newCard);\r\n                    // debugger;\r\n                    const reducer = (accumulator, currentValue) => accumulator.value + currentValue.value;\r\n                    let sumDeck = playerCards[0].reduce(reducer) + newCard.value;\r\n                    // // let sumDeck = playerCards[0][0].value + playerCards[0][1].value + playerCards[0][2].value;\r\n                    // if(sumDeck > 21)\r\n                    //     playerCards[0].push(newCard)\r\n                    //     sumDeck = checkForDifferentSum(playerCards[0])\r\n                    // if(sumDeck<21)\r\n                    //     dispatch(stand(activeDeck))\r\n                    //     // .then(value3=>{\r\n                            \r\n                    dispatch(stand(activeDeck))\r\n                        // console.log(value3);\r\n                    // dispatch(markDeckAsFinished(0))\r\n                    // })\r\n                }, 0);\r\n            });\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const collectProfitAndInitBid = (profit,bidIndex) => {\r\n    return dispatch => {\r\n        dispatch(collectProfits(profit)).then(data => {\r\n            console.log(data);\r\n            dispatch(initDeckBid(bidIndex))\r\n        })\r\n    }\r\n}\r\n\r\nexport const makeInsurance = () => {\r\n    return dispatch=> {\r\n        \r\n        dispatch(checkInsurance()).then((res) => {\r\n                dispatch(roundInsurance());\r\n        });\r\n    }\r\n}\r\n\r\nconst checkForDifferentSum = cards => {\r\n    let countAces = 0;\r\n    let sum = 0;\r\n    \r\n    for(let card of cards)\r\n    {\r\n        if(card.value > 10 && !card.Ace)\r\n        sum = sum + 10;\r\n        else if(card.Ace)    \r\n        {\r\n            countAces++;\r\n            sum+=11;\r\n        }\r\n        else sum+=card.value;\r\n    }   \r\n    let closestToPassed = sum;\r\n    if(countAces)\r\n    {   \r\n        for (let index = 1; index < countAces + 1; index++) {\r\n            if(sum - index*10 < 22)\r\n                return (sum - index*10)\r\n            closestToPassed = (sum - index*10)    \r\n        }   \r\n    }\r\n    return closestToPassed;\r\n}\r\n\r\n// export const collectInsurance = () => {\r\n//     return dispatch => {\r\n\r\n//     }\r\n// }","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js",["173","174","175","176"],"import React, { Component , Fragment , memo } from 'react'\r\nimport Dealer from './Dealer/Dealer'\r\nimport {connect} from 'react-redux'\r\nimport Player from './Player/Player'\r\nimport classes from './TableBoard.module.css'\r\nimport StartButton from '../UI/startButton/startButton'\r\nimport * as actions from '../../Store/Actions/index'\r\n// import Buttons from './Buttons/Buttons'\r\nimport Money from '../UI/Money/Money'\r\nimport Controls from '../UI/Controls/Controls'\r\nimport Chips from '../UI/Chips/Chips'\r\nimport Control from '../UI/Controls/Control/Control'\r\nimport Decision from './decisionPhase/Decision'\r\n\r\nexport class TableBoard extends Component {\r\n\r\n    state = {\r\n        playing:false\r\n    }\r\n\r\n    \r\n    startGameFunc = (e) => {\r\n        this.props.startGame();\r\n        this.setState({playing:true});\r\n        e.preventDefault();\r\n        \r\n        \r\n    }\r\n    \r\n    render() {\r\n       \r\n        let playerStillAlive = (<Fragment>\r\n            <div className={classes.dealerAndPlayer}>     \r\n                \r\n                <Dealer></Dealer>\r\n                <Chips></Chips>\r\n                <Player></Player>\r\n            </div>\r\n            <div className={classes.Money}>\r\n                <Money children={'nope'}>\r\n                </Money>\r\n            </div>\r\n            <div className={classes.Controls}>\r\n                {/* {this.props.desicionPhase === 'decision' ? \r\n                <Decision></Decision> \r\n                :\r\n            <Controls></Controls>\r\n        } */}\r\n        <Controls></Controls>\r\n            </div>\r\n        </Fragment>);\r\n\r\n        let playerLost = <div className={classes.playerLost}>\r\n            better luck next time </div>\r\n\r\n       console.count('tableBoard')\r\n        return (\r\n            <div className={classes.TableBoard}>\r\n                {this.props.lost ? playerLost: playerStillAlive}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n        playing : state.game.isPlaying,\r\n        lost: state.game.lost,\r\n        // desicionPhase: state.round.roundStatus    \r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        // startGame : () => dispatch(actions.startGame()),\r\n          }\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(memo(TableBoard))\r\n\r\n\r\n","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js",["177","178","179"],"import React, { Component , memo } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Deck from '../Deck/Deck'\r\nimport classes from './Dealer.module.css'\r\nimport * as actions from '../../../Store/Actions/index'\r\n\r\nexport class Dealer extends Component {\r\n\r\n\r\n    state = {\r\n        numOfRequestForCard:0,\r\n        showCard:true\r\n    }\r\n    checkIfallPlayersDeckAreDone = (standArray) => {\r\n        for (const stand of standArray) {\r\n            if(!stand)\r\n                return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    DidPlayerFinished = () => {\r\n        if(this.props.handsResult.find(result => result === '') == '')\r\n            return false\r\n        else\r\n            return true;\r\n    }\r\n   \r\n    shouldComponentUpdate = (nextProps,nextState) => {\r\n        if(!nextProps.dealerDeck.length)\r\n            return true\r\n        if(nextProps.dealerDeck.length - nextState.numOfRequestForCard === 2)\r\n        {\r\n           return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if(\r\n             this.checkIfallPlayersDeckAreDone(this.props.handsResult)\r\n         )\r\n        {\r\n            switch (true) {\r\n                case this.props.dealerCardsSum > 21:\r\n                    console.log('dealer lost (cards > 21)')\r\n                    this.props.dealerBust();\r\n                    this.props.changeRoundStatus('decision');\r\n                    this.setState({\r\n                        numOfRequestForCard:0\r\n                    });\r\n                 \r\n                    break;\r\n                case this.props.dealerCardsSum < 17 :\r\n                        //  add another card to the dealer\r\n                        if(this.props.dealerDeck.length - this.state.numOfRequestForCard === 2)\r\n                        {\r\n                            this.props.addCardtoDealer();\r\n                            this.setState({\r\n                                numOfRequestForCard:this.state.numOfRequestForCard + 1\r\n                            });\r\n                        }\r\n                    break;\r\n                        \r\n                // case this.props.dealerCardsSum == 21:\r\n                default:\r\n                            if(this.props.roundStatus == 'pending')                           \r\n                                this.props.changeRoundStatus('decision');\r\n                            if(this.state.numOfRequestForCard)     \r\n                                this.setState({\r\n                                    numOfRequestForCard:0\r\n                                });   \r\n                    break;\r\n            }\r\n        }\r\n        // debugger;\r\n        if(this.DidPlayerFinished() && !this.state.showCard && this.props.dealerDeck.length == 2) \r\n            this.setState({showCard:true})\r\n        \r\n        else if(!this.props.dealerDeck.length && this.state.showCard)\r\n            this.setState({showCard:false})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Dealer}>\r\n                <div className={classes.Deck}>\r\n                <h2>Diller's hand</h2>\r\n                {this.props.dealerCardsSum ?\r\n                    <Deck\r\n                        HideDealerCard ={!this.state.showCard}\r\n                        toHide={true}\r\n                        deckCards = {this.props.dealerDeck}\r\n                        deckSum = {this.props.dealerCardsSum}\r\n                        dealer\r\n                    >\r\n                    </Deck> :''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n        dealerDeck : state.cards.dealerCards,\r\n        handsResult : state.round.handsResult,\r\n        dealerCardsSum:state.cards.dealerCardsSum,\r\n        roundStatus:state.round.roundStatus\r\n        \r\n\r\n        \r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n\r\n        changeRoundStatus : (status) => dispatch(actions.roundStatus(status)),\r\n        addCardtoDealer : () => dispatch(actions.addCard('dealer')),\r\n        dealerBust : () => dispatch(actions.dealerBust()),\r\n       \r\n \r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(memo(Dealer))\r\n","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js",[],"C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js",["180"],"import React from 'react'\r\nimport classes from './Control.module.css'\r\n\r\nconst Control = props => {\r\n\r\n    let disabledClass = props.visibility === 'hidden' ? ' shutDown' :'';\r\n    // debugger;\r\n    let insuranceOnButton = props.insurance;\r\n        return (\r\n            <div className={classes.Control + ' ' + (props.visibility === 'hidden' ? classes.shutDown :'') + (insuranceOnButton ? ' ' + classes.insuranceOn : '')}>\r\n                <button onClick={props.clicked}\r\n                        // style={{'visibility':`${props.visibility}`}}\r\n                        disabled={props.visibility === 'hidden' } \r\n                        \r\n                >\r\n                             {props.children}\r\n                </button>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Control\r\n","C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js",["181","182"],"import React from 'react'\r\nimport classes from './Card.module.css'\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    let colour = 'black'\r\n    let cardSuit = '♣';\r\n    switch (props.symbol) {\r\n        case 'diamond':\r\n            colour = 'red';\r\n            cardSuit = '♦'\r\n            break;\r\n        case 'heart':\r\n            colour='red';\r\n            cardSuit = '♥'\r\n            break;\r\n        case 'club':\r\n            cardSuit = '♣';\r\n            break;\r\n        case 'spade':\r\n            cardSuit = '♠'\r\n            break;\r\n        default:\r\n            console.log('cardSuit is not accaptable!');\r\n            console.error('card suit in not accaptable');\r\n            break;\r\n    }\r\n\r\n\r\n    let cardNumber = props.value;\r\n    switch (cardNumber) {\r\n        case 11:\r\n            cardNumber = props.isAce ? 'A' : 'J';\r\n            // cardNumber = 'J';\r\n            break;\r\n        case 12:\r\n            cardNumber = 'Q';\r\n            break;\r\n        case 13:\r\n            cardNumber = 'K';\r\n            break;\r\n        case 1:\r\n            cardNumber = 'A';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    // if(props.symbol == 'dimond' || 'heart')\r\n    //     colour = 'red'\r\n\r\n    \r\n    let CardClass = `${classes.Card}` + ` ` + `${props.Hiden ? classes.Hiden : ''}`\r\n    let cardActiveClass = `${props.markCard ? classes.active:classes.disActive}`;\r\n    return (\r\n        <div className={CardClass + ' ' + props.newLine + ' ' + cardActiveClass + (props.Hiden ? classes.Hiden : '')} style={{'color':colour}}>\r\n            <div className={classes.Value } >\r\n                <span \r\n                    // style={{'display':`${props.Hiden ? 'none' : true}`}}\r\n                    // className={props.Hiden ? classes.Hiden : ''}\r\n                >\r\n                    {props.Hiden ? '' : cardNumber}\r\n                </span>\r\n            </div>\r\n            <div className={classes.Suit}>\r\n                <span \r\n                    // style={{'display':`${props.Hiden ? 'none' : true}`}}\r\n                    // className={props.Hiden ? classes.Hiden : ''}\r\n                >\r\n                      {props.Hiden ? '' : cardSuit}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Card)\r\n","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\decisionPhase\\decision.js",["183","184"],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\decisionPhase\\Decision.js",["185"],"import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport classes from './Decision.module.css'\r\n\r\nimport Control from '../../UI/Controls/Control/Control'\r\nimport * as actions from '../../../Store/Actions/index'\r\n\r\n\r\nexport class Decision extends Component {\r\n\r\n    changeNextButton = (val) => {\r\n        this.props.changeNextStatus(true)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n            className={classes.Decision}\r\n            >\r\n                <Control\r\n                visibility='visible'\r\n                clicked={() => this.changeNextButton(true)}\r\n                >\r\n                    Next\r\n                </Control>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n    }\r\n}\r\n//clicked\r\n\r\n\r\nconst mapDistpatchToprops = dispatch => {\r\n    return {\r\n        changeNextStatus : (nextState) => dispatch(actions.changeNextValue(nextState))\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null,mapDistpatchToprops)(Decision)\r\n","C:\\black_jack\\black_jack\\src\\components\\UI\\AlertBox\\AlertBox.js",[],{"ruleId":"186","severity":1,"message":"187","line":5,"column":8,"nodeType":"188","messageId":"189","endLine":5,"endColumn":23},{"ruleId":"186","severity":1,"message":"190","line":8,"column":32,"nodeType":"188","messageId":"189","endLine":8,"endColumn":48},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"186","severity":1,"message":"195","line":1,"column":10,"nodeType":"188","messageId":"189","endLine":1,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":21,"column":67,"nodeType":"198","messageId":"199","endLine":21,"endColumn":69},{"ruleId":"200","severity":1,"message":"201","line":23,"column":30,"nodeType":"202","messageId":"203","endLine":23,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":39,"column":35,"nodeType":"202","messageId":"203","endLine":39,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":55,"column":70,"nodeType":"198","messageId":"199","endLine":55,"endColumn":72},{"ruleId":"200","severity":1,"message":"201","line":57,"column":31,"nodeType":"202","messageId":"203","endLine":57,"endColumn":33},{"ruleId":"186","severity":1,"message":"204","line":130,"column":17,"nodeType":"188","messageId":"189","endLine":130,"endColumn":21},{"ruleId":"205","severity":1,"message":"206","line":177,"column":9,"nodeType":"207","messageId":"208","endLine":181,"endColumn":14},{"ruleId":"186","severity":1,"message":"209","line":16,"column":7,"nodeType":"188","messageId":"189","endLine":16,"endColumn":18},{"ruleId":"210","severity":1,"message":"211","line":111,"column":17,"nodeType":"212","messageId":"213","endLine":111,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":116,"column":17,"nodeType":"212","messageId":"213","endLine":116,"endColumn":23},{"ruleId":"196","severity":1,"message":"214","line":147,"column":84,"nodeType":"198","messageId":"199","endLine":147,"endColumn":86},{"ruleId":"196","severity":1,"message":"214","line":152,"column":84,"nodeType":"198","messageId":"199","endLine":152,"endColumn":86},{"ruleId":"186","severity":1,"message":"215","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":16},{"ruleId":"186","severity":1,"message":"216","line":12,"column":12,"nodeType":"188","messageId":"189","endLine":12,"endColumn":32},{"ruleId":"186","severity":1,"message":"217","line":12,"column":34,"nodeType":"188","messageId":"189","endLine":12,"endColumn":57},{"ruleId":"186","severity":1,"message":"218","line":69,"column":25,"nodeType":"188","messageId":"189","endLine":69,"endColumn":36},{"ruleId":"219","severity":1,"message":"220","line":115,"column":8,"nodeType":"221","endLine":115,"endColumn":38,"suggestions":"222"},{"ruleId":"186","severity":1,"message":"218","line":132,"column":21,"nodeType":"188","messageId":"189","endLine":132,"endColumn":32},{"ruleId":"219","severity":1,"message":"220","line":143,"column":8,"nodeType":"221","endLine":143,"endColumn":37,"suggestions":"223"},{"ruleId":"219","severity":1,"message":"224","line":160,"column":8,"nodeType":"221","endLine":160,"endColumn":28,"suggestions":"225"},{"ruleId":"219","severity":1,"message":"220","line":182,"column":8,"nodeType":"221","endLine":182,"endColumn":25,"suggestions":"226"},{"ruleId":"186","severity":1,"message":"227","line":3,"column":17,"nodeType":"188","messageId":"189","endLine":3,"endColumn":35},{"ruleId":"186","severity":1,"message":"228","line":3,"column":36,"nodeType":"188","messageId":"189","endLine":3,"endColumn":52},{"ruleId":"186","severity":1,"message":"229","line":5,"column":10,"nodeType":"188","messageId":"189","endLine":5,"endColumn":14},{"ruleId":"186","severity":1,"message":"230","line":76,"column":11,"nodeType":"188","messageId":"189","endLine":76,"endColumn":21},{"ruleId":"186","severity":1,"message":"231","line":109,"column":25,"nodeType":"188","messageId":"189","endLine":109,"endColumn":32},{"ruleId":"186","severity":1,"message":"232","line":149,"column":7,"nodeType":"188","messageId":"189","endLine":149,"endColumn":27},{"ruleId":"186","severity":1,"message":"233","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":19},{"ruleId":"186","severity":1,"message":"234","line":7,"column":13,"nodeType":"188","messageId":"189","endLine":7,"endColumn":20},{"ruleId":"186","severity":1,"message":"235","line":12,"column":8,"nodeType":"188","messageId":"189","endLine":12,"endColumn":15},{"ruleId":"186","severity":1,"message":"236","line":13,"column":8,"nodeType":"188","messageId":"189","endLine":13,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":23,"column":65,"nodeType":"202","messageId":"203","endLine":23,"endColumn":67},{"ruleId":"200","severity":1,"message":"201","line":67,"column":55,"nodeType":"202","messageId":"203","endLine":67,"endColumn":57},{"ruleId":"200","severity":1,"message":"201","line":77,"column":93,"nodeType":"202","messageId":"203","endLine":77,"endColumn":95},{"ruleId":"186","severity":1,"message":"237","line":6,"column":9,"nodeType":"188","messageId":"189","endLine":6,"endColumn":22},{"ruleId":"238","severity":1,"message":"239","line":53,"column":39,"nodeType":"202","messageId":"240","endLine":53,"endColumn":40},{"ruleId":"238","severity":1,"message":"239","line":53,"column":45,"nodeType":"202","messageId":"240","endLine":53,"endColumn":46},{"ruleId":"241","severity":2,"message":"242","line":8,"column":29,"nodeType":"188","messageId":"243","endLine":8,"endColumn":36},{"ruleId":"241","severity":2,"message":"244","line":35,"column":16,"nodeType":"188","messageId":"243","endLine":35,"endColumn":23},{"ruleId":"186","severity":1,"message":"245","line":31,"column":7,"nodeType":"188","messageId":"189","endLine":31,"endColumn":22},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'devToolsEnhancer' is defined but never used.","no-native-reassign",["246"],"no-negated-in-lhs",["247"],"'actionPromise' is defined but never used.","array-callback-return","Array.prototype.findIndex() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'what' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'playerDecks' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'AlertBox' is defined but never used.","'isInsuranceCollected' is assigned a value but never used.","'setIsInsuranceCollected' is assigned a value but never used.","'totalProfit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["248"],["249"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["250"],["251"],"'markDeckAsFinished' is defined but never used.","'updateDeckResult' is defined but never used.","'time' is defined but never used.","'playerDeck' is assigned a value but never used.","'sumDeck' is assigned a value but never used.","'checkForDifferentSum' is assigned a value but never used.","'StartButton' is defined but never used.","'actions' is defined but never used.","'Control' is defined but never used.","'Decision' is defined but never used.","'disabledClass' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-undef","'classes' is not defined.","undef","'connect' is not defined.","'MapStateToProps' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [props.roundStatus, props.next, props]",{"range":"260","text":"261"},"Update the dependencies array to be: [props, props.dealerBust, props.next]",{"range":"262","text":"263"},"Update the dependencies array to be: [props, props.roundStarted]",{"range":"264","text":"265"},"Update the dependencies array to be: [props, props.insurance]",{"range":"266","text":"267"},[5582,5612],"[props.roundStatus, props.next, props]",[6714,6743],"[props, props.dealerBust, props.next]",[7175,7195],"[props, props.roundStarted]",[7774,7791],"[props, props.insurance]"]