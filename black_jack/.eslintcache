[{"C:\\black_jack\\black_jack\\src\\index.js":"1","C:\\black_jack\\black_jack\\src\\App.js":"2","C:\\black_jack\\black_jack\\src\\reportWebVitals.js":"3","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js":"4","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js":"5","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js":"6","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js":"7","C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js":"8","C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js":"9","C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js":"10","C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js":"11","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js":"12","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"13","C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js":"14","C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js":"15","C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js":"16","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js":"17","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"18","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js":"19","C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js":"20","C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js":"21","C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js":"22","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js":"23","C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js":"24","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js":"25","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"26","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js":"27","C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js":"28","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js":"29"},{"size":1416,"mtime":1613230827048,"results":"30","hashOfConfig":"31"},{"size":450,"mtime":1612258885585,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":1121,"mtime":1613590150425,"results":"34","hashOfConfig":"31"},{"size":4902,"mtime":1613592001664,"results":"35","hashOfConfig":"31"},{"size":8893,"mtime":1613394667402,"results":"36","hashOfConfig":"31"},{"size":382,"mtime":1612258874192,"results":"37","hashOfConfig":"31"},{"size":1276,"mtime":1611155171783,"results":"38","hashOfConfig":"31"},{"size":6354,"mtime":1613591942678,"results":"39","hashOfConfig":"31"},{"size":940,"mtime":1613588935481,"results":"40","hashOfConfig":"31"},{"size":2476,"mtime":1613589225061,"results":"41","hashOfConfig":"31"},{"size":1990,"mtime":1613394813047,"results":"42","hashOfConfig":"31"},{"size":518,"mtime":1609709606059,"results":"43","hashOfConfig":"31"},{"size":1274,"mtime":1613590052061,"results":"44","hashOfConfig":"31"},{"size":2254,"mtime":1613589297398,"results":"45","hashOfConfig":"31"},{"size":4525,"mtime":1613595676290,"results":"46","hashOfConfig":"31"},{"size":3423,"mtime":1613395286010,"results":"47","hashOfConfig":"31"},{"size":447,"mtime":1609853889181,"results":"48","hashOfConfig":"31"},{"size":4401,"mtime":1613594720597,"results":"49","hashOfConfig":"31"},{"size":531,"mtime":1610436404400,"results":"50","hashOfConfig":"31"},{"size":504,"mtime":1609794501214,"results":"51","hashOfConfig":"31"},{"size":3095,"mtime":1613473265730,"results":"52","hashOfConfig":"31"},{"size":9670,"mtime":1613594132192,"results":"53","hashOfConfig":"31"},{"size":479,"mtime":1613059718003,"results":"54","hashOfConfig":"31"},{"size":1348,"mtime":1613394726840,"results":"55","hashOfConfig":"31"},{"size":574,"mtime":1609853867643,"results":"56","hashOfConfig":"31"},{"size":725,"mtime":1613595099319,"results":"57","hashOfConfig":"31"},{"size":669,"mtime":1613059718008,"results":"58","hashOfConfig":"31"},{"size":1958,"mtime":1613060052678,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"p3rekg",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"63"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"C:\\black_jack\\black_jack\\src\\index.js",["123","124"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore , combineReducers , applyMiddleware} from 'redux';\nimport { composeWithDevTools , devToolsEnhancer  } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'; \nimport gameReduecer from './Store/Reduecers/gameReducer'\nimport roundReduecer from './Store/Reduecers/roundReducer'\nimport cardReduecer from './Store/Reduecers/cardReducer'\n\nconst composeEnhancers = composeWithDevTools({\n  name:'arik',\n  trace:true\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\nconst rootReduecer = combineReducers({\n  game:gameReduecer,\n  round:roundReduecer,\n  cards:cardReduecer\n});\n\nconst store = createStore(rootReduecer,composeEnhancers(\n  applyMiddleware(thunk),\n));\n// <React.StrictMode>\n// /* </React.StrictMode> */\n// \nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["125","126"],"C:\\black_jack\\black_jack\\src\\App.js",[],"C:\\black_jack\\black_jack\\src\\reportWebVitals.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js",["127"],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js",["128"],"import * as actionTypes from '../Actions/actionTypes'\r\n\r\nconst initState = {\r\n    dealerCards:[],\r\n    dealerCardsSum:0,\r\n    playerCards:[],\r\n    playerCardsSum:[],\r\n    activeDeckNumber:0,\r\n    bamba:'bamba'\r\n}\r\n\r\n// demonstration\r\nconst playerDecks = {\r\n    playerCards: [\r\n        [{\r\n            value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        },\r\n        {   value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        } // + deckFinished : true/false\r\n             // + activeDeck: true/false\r\n        ]\r\n        ,\r\n        [],\r\n        []\r\n    ]\r\n}\r\n\r\n\r\nconst checkForDifferentSum = cards => {\r\n    let countAces = 0;\r\n    let sum = 0;\r\n    \r\n    for(let card of cards)\r\n    {\r\n        if(card.value > 10 && !card.Ace)\r\n        sum = sum + 10;\r\n        else if(card.Ace)    \r\n        {\r\n            countAces++;\r\n            sum+=11;\r\n        }\r\n        else sum+=card.value;\r\n    }   \r\n    let closestToPassed = sum;\r\n    if(countAces)\r\n    {   \r\n        for (let index = 1; index < countAces + 1; index++) {\r\n            if(sum - index*10 < 22)\r\n                return (sum - index*10)\r\n            closestToPassed = (sum - index*10)    \r\n        }   \r\n    }\r\n    return closestToPassed;\r\n}\r\n\r\n// const checkNumOfAces = (cards) => {\r\n//         let count = 0;\r\n//         for(let card of cards)\r\n//         {\r\n//             if(card.Ace)\r\n//             {\r\n//                 count++;\r\n//                 //do something\r\n//             }\r\n//         }\r\n        \r\n// }\r\n\r\nconst findActiveDeck = (playerCards) => {\r\n    \r\n    for (const deck in playerCards) {\r\n        if(playerCards[+deck].activeDeck)\r\n            return +deck\r\n    }\r\n    // in a case there is no active deck a new available one will be picked!\r\n    \r\n    for (let index = playerCards.length-1; index > -1; index--) {\r\n        if(!playerCards[+index].deckFinished)\r\n            return index;\r\n        \r\n    }\r\n\r\n    //in a case where all the decks are finished and no active deck was found just return -1\r\n    return -1;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst reduecer = (state = initState, action) => {\r\n    // state.playerCards.forEach(playerDecks => {\r\n    //         debugger\r\n    //     playerDecks[Symbol.iterator] =  function* () {\r\n    //         // Write whatever implementation you need\r\n    //         for(const key in this) {\r\n    //           yield this[key];\r\n    //         }\r\n    //       }\r\n    // });\r\n\r\n    switch (action.type) {\r\n        case actionTypes.DEVIDE_STARTING_CARDS:\r\n            let playerSum = action.playerCardsSum;\r\n            action.playerCards.deckFinished = false;\r\n            action.playerCards.activeDeck = true;\r\n            if(action.playerCardsSum>21)\r\n                playerSum = checkForDifferentSum(action.playerCards);\r\n            let dealerSum = action.dealerCardsSum;\r\n            if(action.dealerCardsSum>21)\r\n                dealerSum = checkForDifferentSum(action.dealerCards);\r\n            return {...state,\r\n                dealerCards:action.dealerCards,\r\n                playerCards:[...state.playerCards ,action.playerCards],\r\n                playerCardsSum:[...state.playerCardsSum,playerSum],\r\n                dealerCardsSum:dealerSum\r\n            }\r\n        case actionTypes.MARK_DECK_AS_FINISHED:\r\n            \r\n            let newPlayerCardsArray = state.playerCards.map((deck,index)=> {\r\n                if(index === action.deckNumber)\r\n                {\r\n                    deck.deckFinished = true;\r\n                    deck.activeDeck = false;\r\n                }\r\n                return deck;\r\n            })\r\n            \r\n            let activeDeckNum = findActiveDeck(newPlayerCardsArray);\r\n            //in a case where all the decks are finished just pick with the last one\r\n            if(activeDeckNum === -1)\r\n                activeDeckNum = state.playerCards.length - 1;\r\n                // ddd\r\n\r\n            return {\r\n                ...state,\r\n                activeDeckNumber:activeDeckNum,\r\n                playerCards:newPlayerCardsArray\r\n            }\r\n        case actionTypes.ADD_CARD:\r\n            // debugger;\r\n            let activeDeckIndex = findActiveDeck(state.playerCards);\r\n            if(activeDeckIndex === -1)\r\n                activeDeckIndex = state.playerCards.length - 1;\r\n            let sum ;\r\n            if(action.card.value > 10 && !action.card.Ace)\r\n                sum = 10 + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            else\r\n                sum = action.card.value + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            if(sum > 21)\r\n                sum = checkForDifferentSum([...(action.holder === 'player' ? state.playerCards[activeDeckIndex] : state.dealerCards) , action.card]);\r\n       \r\n\r\n            if(action.holder === 'player')\r\n            {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    if(index === activeDeckIndex)\r\n                        return sum;\r\n                    else return value;\r\n                })\r\n\r\n                let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                    if(deckIndex === activeDeckIndex)\r\n                    {\r\n                        return state.playerCards[deckIndex].concat(action.card);\r\n                    }\r\n                    else return state.playerCards[deckIndex]\r\n                });\r\n                newPlayerCards[activeDeckIndex].activeDeck = true;\r\n                newPlayerCards[activeDeckIndex].deckFinished = false;\r\n                return {...state,\r\n                playerCards:newPlayerCards,\r\n                playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n            else return {\r\n                ...state,\r\n                    dealerCards:[...state.dealerCards,action.card],\r\n                    dealerCardsSum:sum,\r\n                    activeDeckNumber:activeDeckIndex\r\n            };\r\n        case actionTypes.CHANGE_CARDS_SUM:\r\n\r\n            if(action.deckOwner === 'Dealer') \r\n            {\r\n                return {\r\n                    ...state,\r\n                    dealerCardsSum:action.newSum\r\n                }\r\n            }\r\n            else {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    if(index === action.NumOfsplits)\r\n                        return action.newSum;\r\n                    else return value;\r\n                })\r\n                return {\r\n                    ...state,\r\n                    playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n        case 'renderCardsTOFinishROund':\r\n        case 'bamba':\r\n            return {\r\n                ...state,bamba:'yep'\r\n            }\r\n            // maybe we will render this\r\n\r\n        case actionTypes.INIT_ROUND:\r\n            console.log('init game');\r\n            return {\r\n                ...initState\r\n            }\r\n        case actionTypes.SPLIT_DECK:\r\n           \r\n            // find active Deck\r\n            let activeDeck = findActiveDeck(state.playerCards);\r\n            if(activeDeck === -1)\r\n                activeDeck = state.playerCards.length - 1;\r\n            \r\n            // set new card decks for the player after the split\r\n\r\n            // let firstSplitedCard = state.playerCards[activeDeck][0] \r\n            let secondSplitedCard = [];\r\n            secondSplitedCard.deckFinished = false;\r\n            secondSplitedCard.activeDeck = true;\r\n            secondSplitedCard.push( state.playerCards[activeDeck][1]);\r\n            \r\n            // map new player cards and take out spiltted card\r\n            let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                if(deckIndex === activeDeck){\r\n                    // firstSplitedCard.\r\n                    deck.activeDeck = false;\r\n                    deck.pop();\r\n                    return deck;\r\n                \r\n                }\r\n                else return deck;\r\n            } ) ;\r\n            // add the splitted card as a new deck of cards\r\n            newPlayerCards = newPlayerCards.concat([secondSplitedCard]);\r\n            // set new card decks summary array   \r\n            let newPlayerSumCards = state.playerCardsSum.concat(state.playerCardsSum[activeDeck]/2);\r\n            newPlayerSumCards = newPlayerSumCards.map((el,index) => {\r\n                if(index === activeDeck)\r\n                    return el/2\r\n                else return el;\r\n            })\r\n            return {\r\n                ...state,\r\n                playerCards:newPlayerCards,\r\n                playerCardsSum:newPlayerSumCards,\r\n                activeDeckNumber:newPlayerCards.length - 1\r\n                \r\n            }\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default reduecer;","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js",["129","130","131","132","133","134","135"],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js",["136"],"import React, { Component , Fragment , memo } from 'react'\r\nimport Dealer from './Dealer/Dealer'\r\nimport {connect} from 'react-redux'\r\nimport Player from './Player/Player'\r\nimport classes from './TableBoard.module.css'\r\nimport StartButton from '../UI/startButton/startButton'\r\nimport * as actions from '../../Store/Actions/index'\r\n// import Buttons from './Buttons/Buttons'\r\nimport Money from '../UI/Money/Money'\r\nimport Controls from '../UI/Controls/Controls'\r\nimport Chips from '../UI/Chips/Chips'\r\n\r\nexport class TableBoard extends Component {\r\n\r\n    state = {\r\n        playing:false\r\n    }\r\n\r\n    \r\n    startGameFunc = (e) => {\r\n        this.props.startGame();\r\n        this.setState({playing:true});\r\n        e.preventDefault();\r\n        \r\n        \r\n    }\r\n    \r\n    render() {\r\n       \r\n        let playerStillAlive = (<Fragment>\r\n            <div className={classes.dealerAndPlayer}>     \r\n                \r\n                <Dealer></Dealer>\r\n                <Chips></Chips>\r\n                <Player></Player>\r\n            </div>\r\n            <div className={classes.Money}>\r\n                <Money children={'nope'}>\r\n                </Money>\r\n            </div>\r\n            <div className={classes.Controls}>\r\n                <Controls></Controls>\r\n            </div>\r\n        </Fragment>);\r\n\r\n        let playerLost = <div className={classes.playerLost}>\r\n            better luck next time </div>\r\n\r\n       console.count('tableBoard')\r\n        return (\r\n            <div className={classes.TableBoard}>\r\n                {this.props.lost ? playerLost: playerStillAlive}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n        playing : state.game.isPlaying,\r\n        lost: state.game.lost        \r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        startGame : () => dispatch(actions.startGame()),\r\n          }\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(memo(TableBoard))\r\n\r\n\r\n","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js",[],"C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js",["137"],"import React from 'react'\r\nimport classes from './startButton.module.css'\r\n\r\nconst StartButton = (props) => {\r\n    return (\r\n        <div className={classes.startButton}>\r\n            {/* <button\r\n            onClick={props.click}\r\n            >{props.children}\r\n            </button> */}\r\n            <a href=\"#\" onClick={props.clicked} className={classes.btn + ' ' + classes.btnAnimate\r\n        + ' ' + classes.btnWhite}>{props.children}</a>\r\n        </div>\r\n    )\r\n}\r\n// \"btn btn-white btn-animate\"\r\nexport default StartButton\r\n","C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js",[],"C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js",["138"],"C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js",[],{"ruleId":"139","severity":1,"message":"140","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":23},{"ruleId":"139","severity":1,"message":"143","line":8,"column":32,"nodeType":"141","messageId":"142","endLine":8,"endColumn":48},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"139","severity":1,"message":"148","line":1,"column":10,"nodeType":"141","messageId":"142","endLine":1,"endColumn":23},{"ruleId":"139","severity":1,"message":"149","line":13,"column":7,"nodeType":"141","messageId":"142","endLine":13,"endColumn":18},{"ruleId":"139","severity":1,"message":"150","line":19,"column":25,"nodeType":"141","messageId":"142","endLine":19,"endColumn":26},{"ruleId":"139","severity":1,"message":"151","line":24,"column":25,"nodeType":"141","messageId":"142","endLine":24,"endColumn":28},{"ruleId":"139","severity":1,"message":"152","line":64,"column":25,"nodeType":"141","messageId":"142","endLine":64,"endColumn":36},{"ruleId":"153","severity":1,"message":"154","line":70,"column":8,"nodeType":"155","endLine":70,"endColumn":27,"suggestions":"156"},{"ruleId":"139","severity":1,"message":"152","line":84,"column":21,"nodeType":"141","messageId":"142","endLine":84,"endColumn":32},{"ruleId":"153","severity":1,"message":"157","line":89,"column":8,"nodeType":"155","endLine":89,"endColumn":26,"suggestions":"158"},{"ruleId":"153","severity":1,"message":"159","line":107,"column":8,"nodeType":"155","endLine":107,"endColumn":28,"suggestions":"160"},{"ruleId":"139","severity":1,"message":"161","line":6,"column":8,"nodeType":"141","messageId":"142","endLine":6,"endColumn":19},{"ruleId":"162","severity":1,"message":"163","line":11,"column":13,"nodeType":"164","endLine":12,"endColumn":35},{"ruleId":"139","severity":1,"message":"165","line":7,"column":9,"nodeType":"141","messageId":"142","endLine":7,"endColumn":22},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'devToolsEnhancer' is defined but never used.","no-native-reassign",["166"],"no-negated-in-lhs",["167"],"'actionPromise' is defined but never used.","'playerDecks' is assigned a value but never used.","'x' is defined but never used.","'aaa' is defined but never used.","'totalProfit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isInsuranceCollected' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["168"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["169"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["170"],"'StartButton' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'disabledClass' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [isInsuranceCollected, props, props.roundStatus]",{"range":"177","text":"178"},"Update the dependencies array to be: [props, props.dealerBust]",{"range":"179","text":"180"},"Update the dependencies array to be: [props, props.roundStarted]",{"range":"181","text":"182"},[3055,3074],"[isInsuranceCollected, props, props.roundStatus]",[3812,3830],"[props, props.dealerBust]",[4292,4312],"[props, props.roundStarted]"]