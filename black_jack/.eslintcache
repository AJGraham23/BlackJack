[{"C:\\black_jack\\black_jack\\src\\index.js":"1","C:\\black_jack\\black_jack\\src\\App.js":"2","C:\\black_jack\\black_jack\\src\\reportWebVitals.js":"3","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js":"4","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js":"5","C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js":"6","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js":"7","C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js":"8","C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js":"9","C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js":"10","C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js":"11","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js":"12","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"13","C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js":"14","C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js":"15","C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js":"16","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js":"17","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"18","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js":"19","C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js":"20","C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js":"21","C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js":"22","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js":"23","C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js":"24","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js":"25","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"26","C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js":"27","C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js":"28","C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js":"29","C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\hocDealer.js":"30"},{"size":1416,"mtime":1613230827048,"results":"31","hashOfConfig":"32"},{"size":450,"mtime":1612258885585,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":969,"mtime":1613319090552,"results":"35","hashOfConfig":"32"},{"size":4298,"mtime":1613319070033,"results":"36","hashOfConfig":"32"},{"size":9694,"mtime":1613252145372,"results":"37","hashOfConfig":"32"},{"size":382,"mtime":1612258874192,"results":"38","hashOfConfig":"32"},{"size":1276,"mtime":1611155171783,"results":"39","hashOfConfig":"32"},{"size":5936,"mtime":1613232992977,"results":"40","hashOfConfig":"32"},{"size":736,"mtime":1613065773056,"results":"41","hashOfConfig":"32"},{"size":2008,"mtime":1613318836527,"results":"42","hashOfConfig":"32"},{"size":2839,"mtime":1613240575209,"results":"43","hashOfConfig":"32"},{"size":518,"mtime":1609709606059,"results":"44","hashOfConfig":"32"},{"size":619,"mtime":1613059717991,"results":"45","hashOfConfig":"32"},{"size":1657,"mtime":1613316713798,"results":"46","hashOfConfig":"32"},{"size":4232,"mtime":1613318706600,"results":"47","hashOfConfig":"32"},{"size":4613,"mtime":1613243042547,"results":"48","hashOfConfig":"32"},{"size":447,"mtime":1609853889181,"results":"49","hashOfConfig":"32"},{"size":5253,"mtime":1613243659977,"results":"50","hashOfConfig":"32"},{"size":531,"mtime":1610436404400,"results":"51","hashOfConfig":"32"},{"size":504,"mtime":1609794501214,"results":"52","hashOfConfig":"32"},{"size":3393,"mtime":1613059718006,"results":"53","hashOfConfig":"32"},{"size":5853,"mtime":1613316519405,"results":"54","hashOfConfig":"32"},{"size":479,"mtime":1613059718003,"results":"55","hashOfConfig":"32"},{"size":1500,"mtime":1613223662705,"results":"56","hashOfConfig":"32"},{"size":574,"mtime":1609853867643,"results":"57","hashOfConfig":"32"},{"size":503,"mtime":1613234051013,"results":"58","hashOfConfig":"32"},{"size":669,"mtime":1613059718008,"results":"59","hashOfConfig":"32"},{"size":1958,"mtime":1613060052678,"results":"60","hashOfConfig":"32"},{"size":592,"mtime":1613241652137,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"p3rekg",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"65"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"C:\\black_jack\\black_jack\\src\\index.js",["131","132"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore , combineReducers , applyMiddleware} from 'redux';\nimport { composeWithDevTools , devToolsEnhancer  } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'; \nimport gameReduecer from './Store/Reduecers/gameReducer'\nimport roundReduecer from './Store/Reduecers/roundReducer'\nimport cardReduecer from './Store/Reduecers/cardReducer'\n\nconst composeEnhancers = composeWithDevTools({\n  name:'arik',\n  trace:true\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\nconst rootReduecer = combineReducers({\n  game:gameReduecer,\n  round:roundReduecer,\n  cards:cardReduecer\n});\n\nconst store = createStore(rootReduecer,composeEnhancers(\n  applyMiddleware(thunk),\n));\n// <React.StrictMode>\n// /* </React.StrictMode> */\n// \nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["133","134"],"C:\\black_jack\\black_jack\\src\\App.js",[],"C:\\black_jack\\black_jack\\src\\reportWebVitals.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\gameReducer.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\roundReducer.js",["135","136"],"C:\\black_jack\\black_jack\\src\\Store\\Reduecers\\cardReducer.js",["137","138","139"],"import * as actionTypes from '../Actions/actionTypes'\r\n\r\nconst initState = {\r\n    dealerCards:[],\r\n    dealerCardsSum:0,\r\n    playerCards:[],\r\n    playerCardsSum:[],\r\n    activeDeckNumber:0,\r\n    bamba:'bamba'\r\n}\r\n\r\n// demonstration\r\nconst playerDecks = {\r\n    playerCards: [\r\n        [{\r\n            value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        },\r\n        {   value:'value',\r\n            symbol:'synbol',\r\n            isAce:'true/false'\r\n        } // + deckFinished : true/false\r\n             // + activeDeck: true/false\r\n        ]\r\n        ,\r\n        [],\r\n        []\r\n    ]\r\n}\r\n\r\n\r\nconst checkForDifferentSum = cards => {\r\n    let countAces = 0;\r\n    let sum = 0;\r\n    \r\n    for(let card of cards)\r\n    {\r\n        if(card.value > 10 && !card.Ace)\r\n        sum = sum + 10;\r\n        else if(card.Ace)    \r\n        {\r\n            countAces++;\r\n            sum+=11;\r\n        }\r\n        else sum+=card.value;\r\n    }   \r\n    let closestToPassed = sum;\r\n    if(countAces)\r\n    {   \r\n        for (let index = 1; index < countAces + 1; index++) {\r\n            if(sum - index*10 < 22)\r\n                return (sum - index*10)\r\n            closestToPassed = (sum - index*10)    \r\n        }   \r\n    }\r\n    return closestToPassed;\r\n}\r\n\r\n// const checkNumOfAces = (cards) => {\r\n//         let count = 0;\r\n//         for(let card of cards)\r\n//         {\r\n//             if(card.Ace)\r\n//             {\r\n//                 count++;\r\n//                 //do something\r\n//             }\r\n//         }\r\n        \r\n// }\r\n\r\nconst findActiveDeck = (playerCards) => {\r\n    \r\n    for (const deck in playerCards) {\r\n        if(playerCards[+deck].activeDeck)\r\n            return +deck\r\n    }\r\n    // in a case there is no active deck a new available one will be picked!\r\n    \r\n    for (let index = playerCards.length-1; index > -1; index--) {\r\n        if(!playerCards[+index].deckFinished)\r\n            return index;\r\n        \r\n    }\r\n\r\n    //in a case where all the decks are finished and no active deck was found just return -1\r\n    return -1;\r\n}\r\n\r\n\r\n\r\n\r\nconst findNewActiveDeck = (playerCards) => {\r\n    \r\n    for (let index = playerCards.length-1; index > -1; index--) {\r\n        if(!playerCards[+index].deckFinished)\r\n            return index;\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\nconst reduecer = (state = initState, action) => {\r\n    // state.playerCards.forEach(playerDecks => {\r\n    //         debugger\r\n    //     playerDecks[Symbol.iterator] =  function* () {\r\n    //         // Write whatever implementation you need\r\n    //         for(const key in this) {\r\n    //           yield this[key];\r\n    //         }\r\n    //       }\r\n    // });\r\n\r\n    switch (action.type) {\r\n        case actionTypes.DEVIDE_STARTING_CARDS:\r\n            let playerSum = action.playerCardsSum;\r\n            action.playerCards.deckFinished = false;\r\n            action.playerCards.activeDeck = true;\r\n            if(action.playerCardsSum>21)\r\n                playerSum = checkForDifferentSum(action.playerCards);\r\n            let dealerSum = action.dealerCardsSum;\r\n            if(action.dealerCardsSum>21)\r\n                dealerSum = checkForDifferentSum(action.dealerCards);\r\n            return {...state,\r\n                dealerCards:action.dealerCards,\r\n                playerCards:[...state.playerCards ,action.playerCards],\r\n                playerCardsSum:[...state.playerCardsSum,playerSum],\r\n                dealerCardsSum:dealerSum\r\n            }\r\n        case actionTypes.MARK_DECK_AS_FINISHED:\r\n            \r\n            let newPlayerCardsArray = state.playerCards.map((deck,index)=> {\r\n                if(index === action.deckNumber)\r\n                {\r\n                    deck.deckFinished = true;\r\n                    deck.activeDeck = false;\r\n                }\r\n                return deck;\r\n            })\r\n            \r\n            let activeDeckNum = findActiveDeck(newPlayerCardsArray);\r\n            //in a case where all the decks are finished just pick with the last one\r\n            if(activeDeckNum === -1)\r\n                activeDeckNum = state.playerCards.length - 1;\r\n                // ddd\r\n\r\n            return {\r\n                ...state,\r\n                activeDeckNumber:activeDeckNum,\r\n                playerCards:newPlayerCardsArray\r\n            }\r\n        case actionTypes.ADD_CARD:\r\n            // debugger;\r\n            let activeDeckIndex = findActiveDeck(state.playerCards);\r\n            if(activeDeckIndex === -1)\r\n                activeDeckIndex = state.playerCards.length - 1;\r\n            let sum ;\r\n            if(action.card.value > 10 && !action.card.Ace)\r\n                // sum = 10 + (action.holder === 'player' ? state.playerCardsSum[action.NumOfsplits] : state.dealerCardsSum);\r\n                sum = 10 + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            else\r\n                // sum = action.card.value + (action.holder === 'player' ? state.playerCardsSum[action.NumOfsplits] : state.dealerCardsSum);\r\n                sum = action.card.value + (action.holder === 'player' ? state.playerCardsSum[activeDeckIndex] : state.dealerCardsSum);\r\n            if(sum > 21)\r\n                // sum = checkForDifferentSum([...(action.holder === 'player' ? state.playerCards[action.NumOfsplits] : state.dealerCards) , action.card]);\r\n                sum = checkForDifferentSum([...(action.holder === 'player' ? state.playerCards[activeDeckIndex] : state.dealerCards) , action.card]);\r\n       \r\n\r\n            if(action.holder === 'player')\r\n            {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    // if(index === action.NumOfsplits)\r\n                    if(index === activeDeckIndex)\r\n                        return sum;\r\n                    else return value;\r\n                })\r\n\r\n                // debugger;\r\n                let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                    // if(deckIndex === action.NumOfsplits)\r\n                    if(deckIndex === activeDeckIndex)\r\n                    {\r\n                        // state.playerCards[deckIndex].activeDeck = true;\r\n                        // state.playerCards[deckIndex].deckFinished = false;\r\n                        return state.playerCards[deckIndex].concat(action.card);\r\n                    }\r\n                    else return state.playerCards[deckIndex]\r\n                });\r\n                newPlayerCards[activeDeckIndex].activeDeck = true;\r\n                newPlayerCards[activeDeckIndex].deckFinished = false;\r\n                return {...state,\r\n                playerCards:newPlayerCards,\r\n                playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n            else return {\r\n                ...state,\r\n                    dealerCards:[...state.dealerCards,action.card],\r\n                    dealerCardsSum:sum,\r\n                    activeDeckNumber:activeDeckIndex\r\n            };\r\n        case actionTypes.CHANGE_CARDS_SUM:\r\n\r\n            if(action.deckOwner === 'Dealer') \r\n            {\r\n                return {\r\n                    ...state,\r\n                    dealerCardsSum:action.newSum\r\n                }\r\n            }\r\n            else {\r\n                let playerCardsSumArray = state.playerCardsSum.map((value,index)=>{\r\n                    if(index === action.NumOfsplits)\r\n                        return action.newSum;\r\n                    else return value;\r\n                })\r\n                return {\r\n                    ...state,\r\n                    playerCardsSum:playerCardsSumArray\r\n                }\r\n            }\r\n        case 'renderCardsTOFinishROund':\r\n        case 'bamba':\r\n            return {\r\n                ...state,bamba:'yep'\r\n            }\r\n            // maybe we will render this\r\n\r\n        case actionTypes.INIT_ROUND:\r\n            console.log('init game');\r\n            return {\r\n                ...initState\r\n            }\r\n        case actionTypes.SPLIT_DECK:\r\n            // debugger;\r\n            // find active Deck\r\n            let activeDeck = findActiveDeck(state.playerCards);\r\n            if(activeDeck === -1)\r\n                activeDeck = state.playerCards.length - 1;\r\n            // set new card decks for the player after the split\r\n            let firstSplitedCard = state.playerCards[activeDeck][0] \r\n            let secondSplitedCard = [];\r\n            secondSplitedCard.deckFinished = false;\r\n            secondSplitedCard.activeDeck = true;\r\n            secondSplitedCard.push( state.playerCards[activeDeck][1]) \r\n            let newPlayerCards = state.playerCards.map((deck,deckIndex)=>{\r\n                if(deckIndex === activeDeck){\r\n                    // firstSplitedCard.\r\n                    deck.activeDeck = false;\r\n                    deck.pop();\r\n                    return deck;\r\n                \r\n                }\r\n                else return deck;\r\n            } ) ;\r\n            newPlayerCards = newPlayerCards.concat([secondSplitedCard]);\r\n            // set new card decks summary array   \r\n            let newPlayerSumCards = state.playerCardsSum.concat(state.playerCardsSum[activeDeck]/2);\r\n            newPlayerSumCards = newPlayerSumCards.map((el,index) => {\r\n                if(index === activeDeck)\r\n                    return el/2\r\n                else return el;\r\n            })\r\n            return {\r\n                ...state,\r\n                playerCards:newPlayerCards,\r\n                playerCardsSum:newPlayerSumCards,\r\n                activeDeckNumber:newPlayerCards.length - 1\r\n                \r\n            }\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default reduecer;","C:\\black_jack\\black_jack\\src\\hoc\\layout\\layout.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Help\\Help.js",[],"C:\\black_jack\\black_jack\\src\\containers\\Game\\Game.js",["140","141","142","143","144"],"import React, { useEffect, useRef } from 'react'\r\nimport classes from './Game.module.css'\r\nimport TableBoard from '../../components/TableBoard/TableBoard'\r\nimport {connect} from 'react-redux'\r\nimport * as actions from '../../Store/Actions/index'\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n    const gameRefInitMount = useRef(false);\r\n    // let playerFinishedHisHands = props.stand.find(standValue => standValue === false)\r\n    useEffect(() => {\r\n        if( props.roundStatus === 'decision') \r\n        {\r\n            console.log('we made it to the desicions phase!')\r\n            let playerResults = [];\r\n            let totalProfit = 0;\r\n            for (const index in props.playerSum) {\r\n                if (props.playerSum[+index] < 22)\r\n                {\r\n                    switch (true) {\r\n                        case props.playerSum[+index] - props.dealerSum > 0:\r\n                            playerResults.push('win');\r\n                            totalProfit+= props.roundBids[index];\r\n                            props.collectProfit(props.roundBids[+index])    \r\n                        break;\r\n                        case props.playerSum[+index] - props.dealerSum < 0:\r\n                            playerResults.push('lost');\r\n                            totalProfit-= props.roundBids[index];\r\n                            props.collectProfit(-props.roundBids[+index])\r\n                        break;\r\n                        case props.playerSum[+index] - props.dealerSum === 0:\r\n                            totalProfit+= props.roundBids[index];\r\n                            playerResults.push('tie');\r\n                            props.collectProfit(0)   \r\n                        break;\r\n\r\n                        default:\r\n                            alert('something went wrong in [game.js] desicion');\r\n                            break;\r\n                    }   \r\n                }\r\n                else\r\n                {\r\n                    playerResults.push('lost');\r\n                    totalProfit-= props.roundBids[index];\r\n                    props.collectProfit(-props.roundBids[+index])\r\n                }\r\n            }\r\n            props.initRound();\r\n        }\r\n    }, [props.roundStatus]); \r\n    \r\n    useEffect(() => {\r\n        if( props.dealerBust) \r\n        {\r\n            console.log('we made it to the dealerBust phase!')\r\n            let totalProfit = 0;\r\n            for (const index in props.playerSum) {\r\n                if (props.playerSum[+index] < 22)\r\n                {\r\n                    totalProfit+= props.roundBids[index];   \r\n                    props.collectProfit(props.roundBids[+index]) \r\n                }\r\n                else console.log('hand ' + (+index) + 'lost');\r\n                    totalProfit-= props.roundBids[index];   \r\n                    props.collectProfit(-props.roundBids[+index]) \r\n            }\r\n            props.initRound();\r\n        }\r\n    }, [props.dealerBust]); \r\n    \r\n    useEffect(() => {\r\n        \r\n        if(gameRefInitMount.current) {\r\n            console.log('rendering Game from use effect');\r\n            console.log(props);\r\n            if(!props.dealerCards.length && props.roundStatus === 'pending')\r\n            {\r\n                // debugger;\r\n                props.devideStartingCards();\r\n            }\r\n        }\r\n        \r\n        \r\n        else {\r\n            gameRefInitMount.current = true\r\n        }\r\n    }, [props.roundStarted])\r\n    \r\n\r\n \r\n    // const checkStatus = () => {\r\n    //     if(props.dealerCards.legth) {\r\n    //         let sum = 0;\r\n    //         let cards = props.dealerCards;\r\n    //         for(let card of cards)\r\n    //         {\r\n    //             sum = sum + card.value;\r\n    //         }\r\n            \r\n    //     }\r\n    // }\r\n    // console.log('game');\r\n    console.count();\r\n\r\n\r\n    let finalResualt = '';\r\n    if(props.roundStatus === 'lost' || props.roundStatus === 'win' || props.roundStatus === 'tie')\r\n    {\r\n        finalResualt = props.roundStatus;\r\n    }\r\n\r\n    console.log(props.allStand)\r\n    return ( \r\n        // new Promise((res,rej)=> {\r\n\r\n        //     return setTimeout(()=>{},3000);\r\n        // }).then(data => {\r\n        \r\n        //     console.log('3 sec is up');\r\n        //     console.log(data);\r\n        // });\r\n\r\n        \r\n        // this.checkStatus();\r\n\r\n        \r\n            <div className={classes.Game}>\r\n                <h1>Welcome to Blackjack</h1>\r\n                <p className={classes.roundResualt}>\r\n                    {finalResualt}\r\n                    {/* {props.roundStatus === 'lost'?'dealer won': props.roundStatus === 'win' ? 'you won' : ''} */}\r\n                </p>\r\n                <TableBoard>\r\n\r\n                </TableBoard>\r\n                \r\n            </div>\r\n        \r\n    )\r\n\r\n}\r\nconst MapStateToProps = state => {\r\n    return {\r\n      dealerCards:state.cards.dealerCards,\r\n      playerCards:state.cards.playerCards,\r\n      roundStatus:state.round.roundStatus,\r\n      roundBids:state.round.bid,\r\n      budget:state.game.budget,\r\n      dealerSum:state.cards.dealerCardsSum,\r\n      playerSum:state.cards.playerCardsSum,\r\n      stand:state.round.stand,\r\n      allStand:state.round.stand.find(el=> el === false),\r\n    //   numOfSplits:state.round.split,\r\n      roundStarted:state.round.round,\r\n      dealerBust:state.round.dealerBust\r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        // startGame : () => dispatch(actions.startGame()),\r\n        changeRoundStatus : (status) => dispatch(actions.roundStatus(status)),\r\n        initRound : (totalProfit) => dispatch(actions.initRound(totalProfit)),\r\n        hitOneMoreCard : (newBudget) => dispatch(actions.initRound(newBudget)),\r\n        devideStartingCards : () => dispatch(actions.devideCardForRoundStart()),\r\n        collectProfit : (profit) => dispatch(actions.collectProfits(profit))\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(Game)","C:\\black_jack\\black_jack\\src\\Store\\Actions\\actionTypes.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\index.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\TableBoard.js",["145","146"],"import React, { Component , Fragment , memo , Suspense} from 'react'\r\nimport Dealer from './Dealer/Dealer'\r\nimport {connect} from 'react-redux'\r\nimport Player from './Player/Player'\r\nimport classes from './TableBoard.module.css'\r\nimport StartButton from '../UI/startButton/startButton'\r\nimport * as actions from '../../Store/Actions/index'\r\n// import Buttons from './Buttons/Buttons'\r\nimport Money from '../UI/Money/Money'\r\nimport Controls from '../UI/Controls/Controls'\r\nimport Chips from '../UI/Chips/Chips'\r\n\r\nexport class TableBoard extends Component {\r\n\r\n    state = {\r\n        playing:false\r\n    }\r\n\r\n    \r\n  \r\n\r\n    // componentDidMount = () => {\r\n    //     console.log('tableBoard rendered');\r\n        \r\n        \r\n    // }\r\n    \r\n    componentDidUpdate = () => {\r\n        \r\n    }\r\n\r\n    startGameFunc = (e) => {\r\n        this.props.startGame();\r\n        this.setState({playing:true});\r\n        e.preventDefault();\r\n        \r\n        \r\n    }\r\n    \r\n    render() {\r\n       \r\n        let playerStillAlive = (<Fragment>\r\n            <div className={classes.dealerAndPlayer}>     \r\n                \r\n                <Dealer></Dealer>\r\n                <Chips></Chips>\r\n                <Player></Player>\r\n            </div>\r\n            <div className={classes.Money}>\r\n                <Money children={'nope'}>\r\n                </Money>\r\n            </div>\r\n            <div className={classes.Controls}>\r\n                <Controls></Controls>\r\n            </div>\r\n        </Fragment>);\r\n\r\n        let playerLost = <div className={classes.playerLost}>\r\n            better luck next time </div>\r\n\r\n       console.count('tableBoard')\r\n        return (\r\n            <div className={classes.TableBoard}>\r\n                {this.props.lost ? playerLost: playerStillAlive}\r\n                {/* : */}\r\n                {/* <Fragment>\r\n\r\n                <StartButton\r\n                    // clicked={this.startGameFunc}\r\n                    >\r\n                        start game\r\n                </StartButton>\r\n                \r\n                </Fragment>\r\n                } */}\r\n                {/* <div className={classes.Dealer}>\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n        playing : state.game.isPlaying,\r\n        lost: state.game.lost\r\n        // round:state.round.round\r\n        // dealerCards:state.cards.dealerCards,\r\n        // playerCards:state.cards.playerCards\r\n        \r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        startGame : () => dispatch(actions.startGame()),\r\n        // startRound : () => dispatch(actions.startRound()),\r\n        // startDevideCards : () => dispatch(actions.devideCardForRoundStart())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(memo(TableBoard))\r\n\r\n\r\n","C:\\black_jack\\black_jack\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\gameAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\roundAction.js",[],"C:\\black_jack\\black_jack\\src\\Store\\Actions\\cardAction.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Dealer\\Dealer.js",["147"],"import React, { Component , memo } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Deck from '../Deck/Deck'\r\nimport classes from './Dealer.module.css'\r\nimport hocDealer from '../../../hoc/asyncComponent/hocDealer'\r\nimport * as actions from '../../../Store/Actions/index'\r\n\r\nexport class Dealer extends Component {\r\n\r\n\r\n    state = {\r\n        numOfRequestForCard:0\r\n    }\r\n    checkIfallPlayersDeckAreDone = (standArray) => {\r\n        for (const stand of standArray) {\r\n            if(!stand)\r\n                return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    // didPlayerFinish = (handsResults) => {\r\n    //     for (let index = 0; index < handsResults.length; index++) {\r\n    //         if(handsResults[index] === '')\r\n    //             return false\r\n    //     }\r\n\r\n    //     return true\r\n    // }\r\n    // let x = this.didPlayerFinish(this.props.handsResult);\r\n  \r\n   \r\n    shouldComponentUpdate = (nextProps,nextState) => {\r\n        if(!nextProps.dealerDeck.length)\r\n            return true\r\n        if(nextProps.dealerDeck.length - nextState.numOfRequestForCard === 2)\r\n        {\r\n           return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        // debugger;\r\n        // debugger;\r\n        if(\r\n            // this.checkIfallPlayersDeckAreDone(this.props.stand)\r\n             this.checkIfallPlayersDeckAreDone(this.props.handsResult)\r\n         )\r\n        {\r\n            switch (true) {\r\n                case this.props.dealerCardsSum > 21:\r\n                    console.log('dealer lost (cards > 21)')\r\n                    // this.props.changeRoundStatus('win')\r\n                    this.props.dealerBust();\r\n                    // let lengthOfhandsResults = this.props.handsResult.length;\r\n                    // if(this.props.handsResult[lengthOfhandsResults] !== 'lost')\r\n                    // {// this.props.changeHandResult('win');\r\n                    //     // this.props.changeRoundStatus('decision');\r\n                    // }\r\n                    break;\r\n                case this.props.dealerCardsSum < 17 :\r\n                        //  add another card to the dealer\r\n                        if(this.props.dealerDeck.length - this.state.numOfRequestForCard === 2)\r\n                        {\r\n                            this.props.addCardtoDealer();\r\n                            this.setState({\r\n                                numOfRequestForCard:this.state.numOfRequestForCard + 1\r\n                            });\r\n                        }\r\n                    break;\r\n                        \r\n                default:\r\n                            // if(this.props.handsResult[this.props.split] !== 'decision')\r\n                            //     this.props.changeHandResult('decision');\r\n                            this.props.changeRoundStatus('decision');     \r\n                            this.setState({\r\n                                numOfRequestForCard:0\r\n                            });   \r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Dealer}>\r\n                <div className={classes.Deck}>\r\n                <h2>Diller's hand</h2>\r\n                {this.props.dealerCardsSum ?\r\n                    <Deck\r\n                        // HideDealerCard \r\n                        toHide={true}\r\n                        deckCards = {this.props.dealerDeck}\r\n                        deckSum = {this.props.dealerCardsSum}\r\n                    >\r\n                    </Deck> :''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst MapStateToProps = state => {\r\n    return {\r\n        dealerDeck : state.cards.dealerCards,\r\n        handsResult : state.round.handsResult,\r\n        // stand : state.round.stand,\r\n        // split : state.round.split,\r\n        dealerCardsSum:state.cards.dealerCardsSum,\r\n        \r\n\r\n        \r\n    }\r\n}\r\n\r\nconst mapDistpatchToProps = dispatch => {\r\n    return {\r\n        // startRound : () => dispatch(actions.startRound()),\r\n        // generateStartCards : () => dispatch(actions.devideCardForRoundStart()),\r\n        changeRoundStatus : (status) => dispatch(actions.roundStatus(status)),\r\n        addCardtoDealer : () => dispatch(actions.addCard('dealer')),\r\n        dealerBust : () => dispatch(actions.dealerBust()),\r\n        // changeHandResult : (result) => dispatch(actions.changeHandResult(result)),\r\n        // changeRoundStatus : () => dispatch(actions.changeRoundStatus('decision'))\r\n \r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps,mapDistpatchToProps)(memo(Dealer))\r\n","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Player\\Player.js",["148"],"import React, { Component, memo } from 'react'\r\nimport Deck from '../Deck/Deck'\r\nimport classes from './Player.module.css'\r\nimport * as actions from '../../../Store/Actions/index'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Player extends Component {\r\n\r\n\r\n    // const [AcesValuedOne, setAcesValuedOne] = useState(0)\r\n    \r\n   \r\n  \r\n    // shouldComponentUpdate = (nextprops,nextState) => {\r\n    //     if(nextprops.playerCards.length !== this.props.playerCards.length)\r\n    //         return true\r\n    //     else\r\n    //         return false;\r\n    // }\r\n    componentDidUpdate = () => {\r\n        // debugger;\r\n        // debugger;\r\n        if(this.props.playerCards.length)\r\n        {\r\n            if(this.props.playerCards[this.props.activeDeckNumber].length < 2 && this.props.roundStatus === 'pending')\r\n            {\r\n                    let what = 'wtf';\r\n                    this.props.giveOneMoreCard(this.props.activeDeckNumber);\r\n            }\r\n        }\r\n        // cards sum is 21 or over\r\n        if(this.props.playerCardsSum[this.props.activeDeckNumber] > 21) {\r\n            // this.props.roundStatus('lost');\r\n            // this.props.\r\n            this.props.changeHandResult('lost');\r\n            // this.props.toStand(this.props.numOfSplits);\r\n        }\r\n        // props.initRound(props.budget - props.roundBid)\r\n        // console.log('player lost');\r\n        else if (this.props.playerCardsSum[this.props.activeDeckNumber] === 21\r\n            && !this.props.playerCards[this.props.activeDeckNumber].deckFinished) {\r\n            console.log('enable stand mode');\r\n            this.props.toStand(this.props.activeDeckNumber);\r\n            this.props.markDeckAsFinished(this.props.activeDeckNumber);\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        let renderCardDecks = this.props.playerCards.map((deck,deckIndex)=> {\r\n        return  <div key={`deckContainerNumber${deckIndex}`}\r\n                 className={(deckIndex === this.props.activeDeckNumber ? classes.activeDeck: classes.disableDeck)}>\r\n                    <Deck\r\n                        key={`deckNumber${deckIndex}`}\r\n                        deckCards = {deck}\r\n                        deckSum = {this.props.playerCardsSum[deckIndex]}\r\n                        player\r\n                        deckNumber = {deckIndex}\r\n                        playedHand = {deckIndex === this.props.activeDeckNumber}\r\n                        >\r\n                    </Deck>\r\n                </div>\r\n        });\r\n        // debugger;\r\n        // let sum = props.playerCardsSum;\r\n        console.log('player');\r\n        return (\r\n            <div className={classes.Player}>\r\n                \r\n                <h2>Player's hand</h2>\r\n                <div className={classes.Decks}>\r\n                    {this.props.playerCards.length?\r\n                    renderCardDecks\r\n                    :'' }\r\n                    {/* <Deck\r\n                        deckCards = {this.props.playerCards}\r\n                        deckSum = {this.props.playerCardsSum}\r\n                        player\r\n                    >\r\n                    </Deck>\r\n                    <Deck\r\n                        deckCards = {this.props.playerCards}\r\n                        deckSum = {this.props.playerCardsSum}\r\n                        player\r\n                    >\r\n                    </Deck>\r\n                    <Deck\r\n                        deckCards = {this.props.playerCards}\r\n                        deckSum = {this.props.playerCardsSum}\r\n                        player\r\n                    >\r\n                    </Deck>\r\n                    <Deck\r\n                        deckCards = {this.props.playerCards}\r\n                        deckSum = {this.props.playerCardsSum}\r\n                        player\r\n                    >\r\n                    </Deck>\r\n                    */}\r\n                    {/* {props.playerCards\r\n                    ?<h3 className={classes.amount}>bid amount is:<br></br>{props.bidRound + '$'}</h3>\r\n                    : ''\r\n                } */}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n    \r\nconst MapStateToprops = state => {\r\n    return {\r\n        // playRound : state.round.round,\r\n        // bidRound : state.round.bid,\r\n        roundStatus : state.round.roundStatus,\r\n        // numOfSplits : state.round.split,\r\n        activeDeckNumber : state.cards.activeDeckNumber,\r\n        playerCards : state.cards.playerCards,\r\n        playerCardsSum : state.cards.playerCardsSum,\r\n\r\n    }\r\n}\r\n\r\nconst mapDistpatchToprops = dispatch => {\r\n    return {\r\n        toStand : (activeDeckNumber) => dispatch(actions.stand(activeDeckNumber)),\r\n        markDeckAsFinished : (activeDeckNumber) => dispatch(actions.markDeckAsFinished(activeDeckNumber)),\r\n        // roundStatus : (status) => dispatch(actions.roundStatus(status)),\r\n        changeHandResult : (result) => dispatch(actions.changeHandResult(result)),\r\n        // updatePlayerDeckSum : (newSum,deckOwner) => dispatch(actions.changeDeckSum(newSum,deckOwner))\r\n        giveOneMoreCard : (activeDeckNumber) => dispatch(actions.addCard('player',activeDeckNumber))\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default  connect(MapStateToprops,mapDistpatchToprops)(memo(Player))","C:\\black_jack\\black_jack\\src\\components\\UI\\startButton\\startButton.js",["149"],"import React from 'react'\r\nimport classes from './startButton.module.css'\r\n\r\nconst StartButton = (props) => {\r\n    return (\r\n        <div className={classes.startButton}>\r\n            {/* <button\r\n            onClick={props.click}\r\n            >{props.children}\r\n            </button> */}\r\n            <a href=\"#\" onClick={props.clicked} className={classes.btn + ' ' + classes.btnAnimate\r\n        + ' ' + classes.btnWhite}>{props.children}</a>\r\n        </div>\r\n    )\r\n}\r\n// \"btn btn-white btn-animate\"\r\nexport default StartButton\r\n","C:\\black_jack\\black_jack\\src\\components\\UI\\Logo\\Logo.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Money\\Money.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Controls.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Chips\\Chips.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Deck.js",["150","151"],"import React , {Component, Fragment} from 'react'\r\nimport Card from './Card/Card'\r\nimport classes from './Deck.module.css'\r\nimport uniqueId from 'uniqid'\r\nimport { doubleBid } from '../../../Store/Actions';\r\n\r\nclass Deck extends Component { \r\n\r\n\r\n\r\n   render() {\r\n       let cards = 'waiting for a bid';\r\n       if(this.props.deckCards)\r\n       {\r\n            cards = this.props.deckCards.map((card,index)=> {\r\n                return <Card \r\n                Hiden = {index === 0 && this.props.HideDealerCard  ? true : false}\r\n                value={card.value}\r\n                symbol={card.symbol}\r\n                isAce={card.Ace}\r\n                key={uniqueId(`card${index}-`)}\r\n                markCard = {this.props.playedHand === true}\r\n                >\r\n            </Card> \r\n            })\r\n        }\r\n        let CardsClass = this.props.playedHand ? classes.activeDeck : classes.disActiveDeck;\r\n        // CardClass = '';\r\n        return (\r\n            \r\n            <div classes={classes.Decks}>\r\n                <div className={classes.Cards}>\r\n                    <div className={classes.alignCards + ' ' + CardsClass}>\r\n                        {/* <Fragment> */}\r\n                            {cards}\r\n                        {/* </Fragment> */}\r\n                    </div>\r\n                </div>\r\n                <span>{this.props.deckNumber}: </span>\r\n                <p>sum:{this.props.deckSum}</p>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\n\r\n\r\nexport default React.memo(Deck)","C:\\black_jack\\black_jack\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"C:\\black_jack\\black_jack\\src\\components\\UI\\Controls\\Control\\Control.js",[],"C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\asyncComponent.js",[],"C:\\black_jack\\black_jack\\src\\components\\TableBoard\\Deck\\Card\\Card.js",[],"C:\\black_jack\\black_jack\\src\\hoc\\asyncComponent\\hocDealer.js",[],{"ruleId":"152","severity":1,"message":"153","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":23},{"ruleId":"152","severity":1,"message":"156","line":8,"column":32,"nodeType":"154","messageId":"155","endLine":8,"endColumn":48},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"152","severity":1,"message":"161","line":1,"column":10,"nodeType":"154","messageId":"155","endLine":1,"endColumn":15},{"ruleId":"152","severity":1,"message":"162","line":15,"column":7,"nodeType":"154","messageId":"155","endLine":15,"endColumn":25},{"ruleId":"152","severity":1,"message":"163","line":13,"column":7,"nodeType":"154","messageId":"155","endLine":13,"endColumn":18},{"ruleId":"152","severity":1,"message":"164","line":94,"column":7,"nodeType":"154","messageId":"155","endLine":94,"endColumn":24},{"ruleId":"152","severity":1,"message":"165","line":243,"column":17,"nodeType":"154","messageId":"155","endLine":243,"endColumn":33},{"ruleId":"152","severity":1,"message":"166","line":46,"column":21,"nodeType":"154","messageId":"155","endLine":46,"endColumn":32},{"ruleId":"167","severity":1,"message":"168","line":52,"column":8,"nodeType":"169","endLine":52,"endColumn":27,"suggestions":"170"},{"ruleId":"152","severity":1,"message":"166","line":66,"column":21,"nodeType":"154","messageId":"155","endLine":66,"endColumn":32},{"ruleId":"167","severity":1,"message":"168","line":71,"column":8,"nodeType":"169","endLine":71,"endColumn":26,"suggestions":"171"},{"ruleId":"167","severity":1,"message":"172","line":89,"column":8,"nodeType":"169","endLine":89,"endColumn":28,"suggestions":"173"},{"ruleId":"152","severity":1,"message":"174","line":1,"column":47,"nodeType":"154","messageId":"155","endLine":1,"endColumn":55},{"ruleId":"152","severity":1,"message":"175","line":6,"column":8,"nodeType":"154","messageId":"155","endLine":6,"endColumn":19},{"ruleId":"152","severity":1,"message":"176","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":17},{"ruleId":"152","severity":1,"message":"177","line":27,"column":25,"nodeType":"154","messageId":"155","endLine":27,"endColumn":29},{"ruleId":"178","severity":1,"message":"179","line":11,"column":13,"nodeType":"180","endLine":12,"endColumn":35},{"ruleId":"152","severity":1,"message":"181","line":1,"column":28,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"182","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":19},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'devToolsEnhancer' is defined but never used.","no-native-reassign",["183"],"no-negated-in-lhs",["184"],"'stand' is defined but never used.","'updateHandsResults' is assigned a value but never used.","'playerDecks' is assigned a value but never used.","'findNewActiveDeck' is assigned a value but never used.","'firstSplitedCard' is assigned a value but never used.","'totalProfit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["185"],["186"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["187"],"'Suspense' is defined but never used.","'StartButton' is defined but never used.","'hocDealer' is defined but never used.","'what' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Fragment' is defined but never used.","'doubleBid' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [props, props.roundStatus]",{"range":"194","text":"195"},"Update the dependencies array to be: [props, props.dealerBust]",{"range":"196","text":"197"},"Update the dependencies array to be: [props, props.roundStarted]",{"range":"198","text":"199"},[2196,2215],"[props, props.roundStatus]",[2919,2937],"[props, props.dealerBust]",[3408,3428],"[props, props.roundStarted]"]